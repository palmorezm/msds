# DATA 608
# Reactive Plotly CDC Example 2
library(shiny)
library(plotly)
library(dplyr)
library(tidyr)
data <- read.csv("https://raw.githubusercontent.com/charleyferrari/CUNY_DATA_608/master/module3/data/cleaned-cdc-mortality-1999-2010-2.csv", header = TRUE)
ui <- fluidPage(
titlePanel("Crude Mortality Rates"),
h4("A Comparison of States' Causes of Death to National Averages"),
h5("Note: Some states did not report data for every cause and year"),
fluidRow(
column(12,
selectizeInput(
inputId = "State",
label = "Select State:",
choices = unique(data$State),
selected = "NY",
multiple = F),
selectizeInput(
inputId = "Cause",
label = "Select Cause of Death:",
choices = unique(data$ICD.Chapter),
selected = "Pregnancy, childbirth and the puerperium",
multiple = F)
),
fluidRow(
column(6,
plotlyOutput(outputId = "p",
height = "600px",
width = "800px")),
column(6,
plotlyOutput(outputId = "b",
height = "600px",
width = "800px"))
),
hr(),
helpText("Data Source: CDC WONDER system, at
https://wonder.cdc.gov/ucd-icd10.htm")
)
)
server <- function(input, output, ...) {
output$p <- renderPlotly({
data %>%
group_by(Year, ICD.Chapter) %>%
mutate(National_Average = as.numeric(mean(Crude.Rate)),
Difference = Crude.Rate - National_Average,
Time = as.Date(ISOdate(Year, 12, 31)) ) %>%
filter(State == input$State & ICD.Chapter == input$Cause) %>% ungroup() %>%
plot_ly(., x = ~Year, y = ~Crude.Rate, type = 'scatter', mode='lines', name = "State") %>%
add_trace(y = ~National_Average, name = "National", connectgaps = TRUE) %>%
layout(title = "Change in Crude Mortality Rate",
xaxis = list(title = "Year"),
yaxis = list(title = "Crude Mortality Rate (per 100,000)"),
legend = list(orientation = 'h', x = 0.35, y = 1.019))
})
output$b <- renderPlotly({
data %>%
group_by(Year, ICD.Chapter) %>%
mutate(National_Average = as.numeric(mean(Crude.Rate)),
Difference = as.numeric(Crude.Rate - National_Average),
LTNA = ifelse(Difference <0, Difference, NA),
GTNA = ifelse(Difference >=0, Difference, NA),
Time = as.Date(ISOdate(Year, 12, 31)) ) %>%
filter(State == input$State & ICD.Chapter == input$Cause) %>%
ungroup() %>%
plot_ly(.,
x = ~Year,
y = ~GTNA,
type = 'bar',
marker = list(
color = 'red'
),
name = "Above National Average") %>%
add_bars(x = ~Year,
y = ~LTNA,
base = 0,
marker = list(
color = 'blue'
),
name = 'Below National Average'
) %>%
layout(title = "Difference in Crude Rate by State",
xaxis = list(title = "Year"),
yaxis = list(title = "Difference (per 100,000)"),
legend = list(x = .2, y = 1.019, orientation = "h"))
})
output$c <- renderPlotly({
subplot(output$p, output$b) %>%
layout(title = 'Side By Side Subplots')
})
}
shinyApp(ui, server)
library(shiny)
update.packages('shiny')
library(shiny)
remove.packages('htmltools')
library(shiny)
remove.packages('htmltools', lib = "C:/Users/Owner/Documents/R/win-library/4.1.1")
remove.packages('htmltools', lib = "C:/Users/Owner/Documents/R/win-library/4.1.0")
install.packages("htmltools", lib = "C:/Users/Owner/Documents/R/win-library/4.1.1")
install.packages("htmltools", lib = "C:/Users/Owner/Documents/R/win-library/4.1.1")
install.packages("Rtools")
# DATA 608
# Reactive Plotly CDC Example 2
library(shiny)
library(plotly)
library(dplyr)
library(tidyr)
data <- read.csv("https://raw.githubusercontent.com/charleyferrari/CUNY_DATA_608/master/module3/data/cleaned-cdc-mortality-1999-2010-2.csv", header = TRUE)
ui <- fluidPage(
titlePanel("Crude Mortality Rates"),
h4("A Comparison of States' Causes of Death to National Averages"),
h5("Note: Some states did not report data for every cause and year"),
fluidRow(
column(12,
selectizeInput(
inputId = "State",
label = "Select State:",
choices = unique(data$State),
selected = "NY",
multiple = F),
selectizeInput(
inputId = "Cause",
label = "Select Cause of Death:",
choices = unique(data$ICD.Chapter),
selected = "Pregnancy, childbirth and the puerperium",
multiple = F)
),
fluidRow(
column(6,
plotlyOutput(outputId = "p",
height = "600px",
width = "800px")),
column(6,
plotlyOutput(outputId = "b",
height = "600px",
width = "800px"))
),
hr(),
helpText("Data Source: CDC WONDER system, at
https://wonder.cdc.gov/ucd-icd10.htm")
)
)
server <- function(input, output, ...) {
output$p <- renderPlotly({
data %>%
group_by(Year, ICD.Chapter) %>%
mutate(National_Average = as.numeric(mean(Crude.Rate)),
Difference = Crude.Rate - National_Average,
Time = as.Date(ISOdate(Year, 12, 31)) ) %>%
filter(State == input$State & ICD.Chapter == input$Cause) %>% ungroup() %>%
plot_ly(., x = ~Year, y = ~Crude.Rate, type = 'scatter', mode='lines', name = "State") %>%
add_trace(y = ~National_Average, name = "National", connectgaps = TRUE) %>%
layout(title = "Change in Crude Mortality Rate",
xaxis = list(title = "Year"),
yaxis = list(title = "Crude Mortality Rate (per 100,000)"),
legend = list(orientation = 'h', x = 0.35, y = 1.019))
})
output$b <- renderPlotly({
data %>%
group_by(Year, ICD.Chapter) %>%
mutate(National_Average = as.numeric(mean(Crude.Rate)),
Difference = as.numeric(Crude.Rate - National_Average),
LTNA = ifelse(Difference <0, Difference, NA),
GTNA = ifelse(Difference >=0, Difference, NA),
Time = as.Date(ISOdate(Year, 12, 31)) ) %>%
filter(State == input$State & ICD.Chapter == input$Cause) %>%
ungroup() %>%
plot_ly(.,
x = ~Year,
y = ~GTNA,
type = 'bar',
marker = list(
color = 'red'
),
name = "Above National Average") %>%
add_bars(x = ~Year,
y = ~LTNA,
base = 0,
marker = list(
color = 'blue'
),
name = 'Below National Average'
) %>%
layout(title = "Difference in Crude Rate by State",
xaxis = list(title = "Year"),
yaxis = list(title = "Difference (per 100,000)"),
legend = list(x = .2, y = 1.019, orientation = "h"))
})
output$c <- renderPlotly({
subplot(output$p, output$b) %>%
layout(title = 'Side By Side Subplots')
})
}
shinyApp(ui, server)
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(dplyr)
library(ggplot2)
mort <- read.csv("https://raw.githubusercontent.com/charleyferrari/CUNY_DATA_608/master/module3/data/cleaned-cdc-mortality-1999-2010-2.csv", header = TRUE)
# create subset with just 2010 data
mort_2010 <- subset(mort, Year == "2010")
# group by state and disease, with new variables showing the sum of deaths & pop in that grouping
mort_2010 <- mort_2010 %>%
group_by(State, ICD.Chapter) %>%
summarize(tot_deaths = sum(Deaths), tot_pop = sum(Population))
# create new variable crude_rate to recalculate the crude rate at this grouping level
mort_2010$crude_rate <- round((mort_2010$tot_deaths / mort_2010$tot_pop) * 100000, 4)
# Use a fluid Bootstrap layout
ui <- fluidPage(
# Give the page a title
titlePanel("Crude Mortality Rates by Cause in 2010, by State"),
# Generate a row with a sidebar
sidebarLayout(
# Define the sidebar with one input
sidebarPanel(
selectInput("cause", "Cause:",
choices=mort_2010$ICD.Chapter),
hr(),
helpText("Taken from the CDC.")
),
# Create a spot for the barplot
mainPanel(
plotOutput("crude_plot")
)
)
)
# Define a server for the Shiny app
function(input, output) {
# Fill in the spot we created for a plot
output$crude_plot <- renderPlot({
# filter data by user input
if(input$cause != ""){
mort_2010 <- filter(mort_2010, ICD.Chapter == input$cause)}
# make barplot
ggplot(mort_2010, aes(x = crude_rate, y = reorder(State, crude_rate))) +
geom_bar(stat = "identity") +
labs(title = "2010 Crude Mortality Rates, by State",
x = "Crude Rate (Per 100,000)",
y ="State")
}, height = 800, width = 800)
}
# Run the application
shinyApp(ui = ui, server = server)
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(dplyr)
library(ggplot2)
mort <- read.csv("https://raw.githubusercontent.com/charleyferrari/CUNY_DATA_608/master/module3/data/cleaned-cdc-mortality-1999-2010-2.csv", header = TRUE)
# create subset with just 2010 data
mort_2010 <- subset(mort, Year == "2010")
# group by state and disease, with new variables showing the sum of deaths & pop in that grouping
mort_2010 <- mort_2010 %>%
group_by(State, ICD.Chapter) %>%
summarize(tot_deaths = sum(Deaths), tot_pop = sum(Population))
# create new variable crude_rate to recalculate the crude rate at this grouping level
mort_2010$crude_rate <- round((mort_2010$tot_deaths / mort_2010$tot_pop) * 100000, 4)
# Use a fluid Bootstrap layout
ui <- fluidPage(
# Give the page a title
titlePanel("Crude Mortality Rates by Cause in 2010, by State"),
# Generate a row with a sidebar
sidebarLayout(
# Define the sidebar with one input
sidebarPanel(
selectInput("cause", "Cause:",
choices=mort_2010$ICD.Chapter),
hr(),
helpText("Taken from the CDC.")
),
# Create a spot for the barplot
mainPanel(
plotOutput("crude_plot")
)
)
)
# Define a server for the Shiny app
function(input, output) {
# Fill in the spot we created for a plot
output$crude_plot <- renderPlot({
# filter data by user input
if(input$cause != ""){
mort_2010 <- filter(mort_2010, ICD.Chapter == input$cause)}
# make barplot
ggplot(mort_2010, aes(x = crude_rate, y = reorder(State, crude_rate))) +
geom_bar(stat = "identity") +
labs(title = "2010 Crude Mortality Rates, by State",
x = "Crude Rate (Per 100,000)",
y ="State")
}, height = 800, width = 800)
}
# Run the application
ShinyApp(ui = ui, server = server)
