sidebarPanel(
selectizeInput(
inputId = "Statistic",
label = "Select Filter:",
choices = unique(df_0919$Statistic),
selected = "Population",
multiple = F),
selectizeInput(
inputId = "Year",
label = "Select Year:",
choices = unique(df_0919$Year),
selected = "2009",
multiple = F)
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Trend", plotOutput(outputId = "Summary")),
tabPanel("Table", tableOutput("table")),
tabPanel("Map", plotlyOutput(outputId = "p",
height = "800px",
width = "1000px"))
),
)
)
)
server <- function(input, output, ...) {
pltlytbl <- df.tbl %>%
filter(Statistic == input$Statistic)
tbl <- df_0919 %>%
filter(Year == input$Year) %>%
summarize(min = min(Value),
med = median(Value),
max = max(Value))
output$p <- renderPlotly({
df_0919 %>%
filter(Year == input$Year) %>%
plot_ly(.) %>%
add_trace(
type="choropleth",
geojson=counties,
locations=df_0919$GeoFips,
z=df_0919$Value,
colorscale="Viridis",
zmin=tbl$min,
zmax=tbl$max,
marker=list(line=list(
width=0))) %>%
colorbar(title = "Value") %>%
layout(title = "Selected Statistical Changes in U.S. Counties") %>%
layout(geo = g)
})
output$Summary <- renderPlotly({
# Create line plot here
plot_ly(pltlytbl, x = ~Years, y = ~min, name = "min", type = "scatter", mode = "lines+markers") %>%
add_trace(y = ~med, name = 'med', mode = 'lines+markers') %>%
add_trace(y = ~max, name = 'max', mode = 'lines+markers')
})
output$Table <- renderTable({
df_0919 %>%
filter(Statistic == input$Statistic) %>%
filter(Year == input$Year) %>%
summarize(min = min(Value),
med = median(Value),
max = max(Value)) %>%
kbl()
})
}
shinyApp(ui, server)
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Some Title"),
h4("Some Heading with some text for reference"),
h5("Note: Some special note regarding the data"),
sidebarLayout(
sidebarPanel(
selectizeInput(
inputId = "Statistic",
label = "Select Filter:",
choices = unique(df_0919$Statistic),
selected = "Population",
multiple = F),
selectizeInput(
inputId = "Year",
label = "Select Year:",
choices = unique(df_0919$Year),
selected = "2009",
multiple = F)
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Trend", plotOutput(outputId = "Summary")),
tabPanel("Table", tableOutput("Table")),
tabPanel("Map", plotlyOutput(outputId = "p",
height = "800px",
width = "1000px"))
),
)
)
)
server <- function(input, output, ...) {
pltlytbl <- df.tbl %>%
filter(Statistic == input$Statistic)
tbl <- df_0919 %>%
filter(Year == input$Year) %>%
summarize(min = min(Value),
med = median(Value),
max = max(Value))
output$p <- renderPlotly({
df_0919 %>%
filter(Year == input$Year) %>%
plot_ly(.) %>%
add_trace(
type="choropleth",
geojson=counties,
locations=df_0919$GeoFips,
z=df_0919$Value,
colorscale="Viridis",
zmin=tbl$min,
zmax=tbl$max,
marker=list(line=list(
width=0))) %>%
colorbar(title = "Value") %>%
layout(title = "Selected Statistical Changes in U.S. Counties") %>%
layout(geo = g)
})
output$Summary <- renderPlotly({
# Create line plot here
plot_ly(pltlytbl, x = ~Years, y = ~min, name = "min", type = "scatter", mode = "lines+markers") %>%
add_trace(y = ~med, name = 'med', mode = 'lines+markers') %>%
add_trace(y = ~max, name = 'max', mode = 'lines+markers')
})
output$Table <- renderTable({
df_0919 %>%
filter(Statistic == input$Statistic) %>%
filter(Year == input$Year) %>%
summarize(min = min(Value),
med = median(Value),
max = max(Value)) %>%
kbl()
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Some Title"),
h4("Some Heading with some text for reference"),
h5("Note: Some special note regarding the data"),
sidebarLayout(
sidebarPanel(
selectizeInput(
inputId = "Statistic",
label = "Select Filter:",
choices = unique(df_0919$Statistic),
selected = "Population",
multiple = F),
selectizeInput(
inputId = "Year",
label = "Select Year:",
choices = unique(df_0919$Year),
selected = "2009",
multiple = F)
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Trend", plotlyOutput(outputId = "Summary")),
tabPanel("Table", tableOutput("Table")),
tabPanel("Map", plotlyOutput(outputId = "p",
height = "800px",
width = "1000px"))
),
)
)
)
server <- function(input, output, ...) {
pltlytbl <- df.tbl %>%
filter(Statistic == input$Statistic)
tbl <- df_0919 %>%
filter(Year == input$Year) %>%
summarize(min = min(Value),
med = median(Value),
max = max(Value))
output$p <- renderPlotly({
df_0919 %>%
filter(Year == input$Year) %>%
plot_ly(.) %>%
add_trace(
type="choropleth",
geojson=counties,
locations=df_0919$GeoFips,
z=df_0919$Value,
colorscale="Viridis",
zmin=tbl$min,
zmax=tbl$max,
marker=list(line=list(
width=0))) %>%
colorbar(title = "Value") %>%
layout(title = "Selected Statistical Changes in U.S. Counties") %>%
layout(geo = g)
})
output$Summary <- renderPlotly({
# Create line plot here
plot_ly(pltlytbl, x = ~Years, y = ~min, name = "min", type = "scatter", mode = "lines+markers") %>%
add_trace(y = ~med, name = 'med', mode = 'lines+markers') %>%
add_trace(y = ~max, name = 'max', mode = 'lines+markers')
})
output$Table <- renderTable({
df_0919 %>%
filter(Statistic == input$Statistic) %>%
filter(Year == input$Year) %>%
summarize(min = min(Value),
med = median(Value),
max = max(Value)) %>%
kbl()
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Some Title"),
h4("Some Heading with some text for reference"),
h5("Note: Some special note regarding the data"),
sidebarLayout(
sidebarPanel(
selectizeInput(
inputId = "Statistic",
label = "Select Filter:",
choices = unique(df_0919$Statistic),
selected = "Population",
multiple = F),
selectizeInput(
inputId = "Year",
label = "Select Year:",
choices = unique(df_0919$Year),
selected = "2009",
multiple = F)
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Trend", plotlyOutput(outputId = "Summary")),
tabPanel("Table", tableOutput("Table")),
tabPanel("Map", plotlyOutput(outputId = "p",
height = "800px",
width = "1000px"))
),
)
)
)
server <- function(input, output, ...) {
pltlytbl2 <- df.tbl %>%
filter(Statistic == input$Statistic)
tbl <- df_0919 %>%
filter(Year == input$Year) %>%
summarize(min = min(Value),
med = median(Value),
max = max(Value))
output$p <- renderPlotly({
df_0919 %>%
filter(Year == input$Year) %>%
plot_ly(.) %>%
add_trace(
type="choropleth",
geojson=counties,
locations=df_0919$GeoFips,
z=df_0919$Value,
colorscale="Viridis",
zmin=tbl$min,
zmax=tbl$max,
marker=list(line=list(
width=0))) %>%
colorbar(title = "Value") %>%
layout(title = "Selected Statistical Changes in U.S. Counties") %>%
layout(geo = g)
})
output$Summary <- renderPlotly({
# Create line plot here
plot_ly(pltlytbl2, x = ~Years, y = ~min,
name = "min", type = "scatter", mode = "lines+markers") %>%
add_trace(y = ~med, name = 'med', mode = 'lines+markers') %>%
add_trace(y = ~max, name = 'max', mode = 'lines+markers')
})
output$Table <- renderTable({
df_0919 %>%
filter(Statistic == input$Statistic) %>%
filter(Year == input$Year) %>%
summarize(min = min(Value),
med = median(Value),
max = max(Value)) %>%
kbl()
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Some Title"),
h4("Some Heading with some text for reference"),
h5("Note: Some special note regarding the data"),
sidebarLayout(
sidebarPanel(
selectizeInput(
inputId = "Statistic",
label = "Select Filter:",
choices = unique(df_0919$Statistic),
selected = "Population",
multiple = F),
selectizeInput(
inputId = "Year",
label = "Select Year:",
choices = unique(df_0919$Year),
selected = "2009",
multiple = F)
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Trend", plotlyOutput(outputId = "Summary")),
tabPanel("Table", tableOutput("Table")),
tabPanel("Map", plotlyOutput(outputId = "p",
height = "800px",
width = "1000px"))
),
)
)
)
server <- function(input, output, ...) {
pltlytbl2 <- df.tbl %>%
filter(Statistic == input$Statistic)
tbl <- df_0919 %>%
filter(Year == input$Year) %>%
summarize(min = min(Value),
med = median(Value),
max = max(Value))
output$p <- renderPlotly({
df_0919 %>%
filter(Year == input$Year) %>%
plot_ly(.) %>%
add_trace(
type="choropleth",
geojson=counties,
locations=df_0919$GeoFips,
z=df_0919$Value,
colorscale="Viridis",
zmin=tbl$min,
zmax=tbl$max,
marker=list(line=list(
width=0))) %>%
colorbar(title = "Value") %>%
layout(title = "Selected Statistical Changes in U.S. Counties") %>%
layout(geo = g)
})
output$Summary <- renderPlotly({
# Create line plot here
plot_ly(pltlytbl2, x = ~Years, y = ~min,
name = "min", type = "scatter", mode = "lines+markers") %>%
add_trace(y = ~med, name = 'med', mode = 'lines+markers') %>%
add_trace(y = ~max, name = 'max', mode = 'lines+markers')
})
output$Table <- renderTable({
df_0919 %>%
filter(Statistic == input$Statistic) %>%
filter(Year == input$Year) %>%
summarize(min = min(Value),
med = median(Value),
max = max(Value)) %>%
kbl()
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Some Title"),
h4("Some Heading with some text for reference"),
h5("Note: Some special note regarding the data"),
sidebarLayout(
sidebarPanel(
selectizeInput(
inputId = "Statistic",
label = "Select Filter:",
choices = unique(df_0919$Statistic),
selected = "Population",
multiple = F),
selectizeInput(
inputId = "Year",
label = "Select Year:",
choices = unique(df_0919$Year),
selected = "2009",
multiple = F)
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Trend", plotlyOutput(outputId = "Summary")),
tabPanel("Table", tableOutput("Table")),
tabPanel("Map", plotlyOutput(outputId = "p",
height = "800px",
width = "1000px"))
),
)
)
)
server <- function(input, output, ...) {
pltlytbl2 <- df.tbl %>%
filter(Statistic == input$Statistic)
tbl <- df_0919 %>%
filter(Year == input$Year) %>%
summarize(min = min(Value),
med = median(Value),
max = max(Value))
output$p <- renderPlotly({
df_0919 %>%
filter(Year == input$Year) %>%
plot_ly(.) %>%
add_trace(
type="choropleth",
geojson=counties,
locations=df_0919$GeoFips,
z=df_0919$Value,
colorscale="Viridis",
zmin=tbl$min,
zmax=tbl$max,
marker=list(line=list(
width=0))) %>%
colorbar(title = "Value") %>%
layout(title = "Selected Statistical Changes in U.S. Counties") %>%
layout(geo = g)
})
output$Summary <- renderPlotly({
# Create line plot here
plot_ly(pltlytbl2, x = ~Years, y = ~min,
name = "min", type = "scatter", mode = "lines+markers") %>%
add_trace(y = ~med, name = 'med', mode = 'lines+markers') %>%
add_trace(y = ~max, name = 'max', mode = 'lines+markers')
})
output$Table <- renderTable({
df_0919 %>%
filter(Statistic == input$Statistic) %>%
filter(Year == input$Year) %>%
summarize(min = min(Value),
med = median(Value),
max = max(Value)) %>%
kbl()
})
}
shinyApp(ui, server)
View(df)
ui <- fluidPage(
titlePanel("Some Title"),
h4("Some Heading with some text for reference"),
h5("Note: Some special note regarding the data"),
sidebarLayout(
sidebarPanel(
selectizeInput(
inputId = "Statistic",
label = "Select Filter:",
choices = unique(df_0919$Statistic),
selected = "Population",
multiple = F),
selectizeInput(
inputId = "Year",
label = "Select Year:",
choices = unique(df_0919$Year),
selected = "2009",
multiple = F)
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Trend", plotlyOutput(outputId = "Summary")),
tabPanel("Table", tableOutput("Table")),
tabPanel("Map", plotlyOutput(outputId = "p",
height = "800px",
width = "1000px"))
),
)
)
)
server <- function(input, output, ...) {
pltlytbl2 <- df_0919 %>%
filter(Statistic == input$Statistic)
tbl <- df_0919 %>%
filter(Year == input$Year) %>%
summarize(min = min(Value),
med = median(Value),
max = max(Value))
output$p <- renderPlotly({
df_0919 %>%
filter(Year == input$Year) %>%
plot_ly(.) %>%
add_trace(
type="choropleth",
geojson=counties,
locations=df_0919$GeoFips,
z=df_0919$Value,
colorscale="Viridis",
zmin=tbl$min,
zmax=tbl$max,
marker=list(line=list(
width=0))) %>%
colorbar(title = "Value") %>%
layout(title = "Selected Statistical Changes in U.S. Counties") %>%
layout(geo = g)
})
output$Summary <- renderPlotly({
# Create line plot here
plot_ly(pltlytbl2, x = ~Years, y = ~min,
name = "min", type = "scatter", mode = "lines+markers") %>%
add_trace(y = ~med, name = 'med', mode = 'lines+markers') %>%
add_trace(y = ~max, name = 'max', mode = 'lines+markers')
})
output$Table <- renderTable({
df_0919 %>%
filter(Statistic == input$Statistic) %>%
filter(Year == input$Year) %>%
summarize(min = min(Value),
med = median(Value),
max = max(Value)) %>%
kbl()
})
}
shinyApp(ui, server)
