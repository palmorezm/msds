merged.df.2011, merged.df.2010)
# Rename and drop columns
merged.df <- merged.df %>%
dplyr::select(-GeoName.y, -year.y)
colnames(merged.df) <- c("GeoFips",
"GeoName", "year", "MEDINC", "MEDVAL")
View(merged.df)
# All metros 2010 through 2019
df_mapping <- merged.df %>%
mutate(IR = 0.035,
PMT = MEDVAL * 0.8 * (IR / 12)/(1 - (1/(1 + IR/12)^360)),
QINC = PMT * 4 * 12,
HAI = (MEDINC / QINC) * 100) %>%
filter(HAI >= 0 & HAI <= 500) %>%
arrange(desc(HAI))
counties <- rjson::fromJSON(file="https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json")
# Data comes from "HAIEstimates.R" and "GEOID_GEOFIPS.R"
df <- df_mapping %>%
filter(year == "2019")
csa <- tigris::combined_statistical_areas()
cores <- tigris::core_based_statistical_areas()
View(cores)
library(dplyr)
library(tidyr)
library(rjson)
library(tigris)
View(cores)
cores %>%
filter(LSAD == M1)
cores %>%
filter(LSAD == "M1")
metro_areas <- cores %>%
filter(LSAD == "M1")
View(metro_areas)
View(df_mapping)
View(df)
tempdir()
dir.create(tempdir())
plot(metro_areas)
plot(metro_areas$CBSAFP, col = df$HAI)
plot(metro_areas$CBSAFP)
plot(metro_areas$CBSAFP)
plot(metro_areas$GEOID)
metro_areas$geometry
metros <- metro_areas$CBSAFP
metros$geometry <- metro_areas$geometry
metros
metros$``
plot(metros)
metro_areas %>%
filter(GEOID == 33260)
metro_areas %>%
filtr(GEOID == 19180)
metro_areas %>%
filter(GEOID == 19180)
metro_areas %>%
filter(GEOID == 19500)
plot(metro_areas$GEOID)
plot(metro_areas$GEOID)
plot(metro_areas$GEOID, col = df$HAI)
plot(metros)
plot(metro_areas$geometry)
plot(metro_areas$geometry, df$HAI)
plot(metro_areas$geometry, col = df$HAI)
library(ggplot2)
df$HAI %>%
ggplot() + geom_histogram()
df %>%
ggplot(aes(HAI)) + geom_histogram()
df %>%
ggplot(aes(HAI)) + geom_histogram(aes(color = HAI))
df %>%
ggplot(aes(HAI)) + geom_histogram(aes(fill = HAI))
df %>%
ggplot(aes(HAI)) + geom_histogram(aes(fill = QINC))
df %>%
ggplot(aes(HAI, alpha = 0.5)) + geom_histogram()
df %>%
ggplot(aes(HAI, alpha = 0.5, fill = HAI)) + geom_histogram()
df %>%
ggplot(aes(HAI, alpha = 0.5, color = HAI)) + geom_histogram()
df %>%
ggplot(aes(HAI, alpha = 0.5)) + geom_histogram(stat = "count")
df %>%
ggplot(aes(HAI, alpha = 0.5)) + geom_histogram(stat = "identity")
df %>%
ggplot(aes(HAI, alpha = 0.5)) + geom_histogram(stat = "bin")
df %>%
ggplot(aes(HAI, alpha = 0.5)) + geom_histogram(stat = "bin", binwidth = 10)
df %>%
ggplot(aes(HAI, alpha = 0.5)) + geom_histogram(stat = "bin", binwidth = 40)
df %>%
ggplot(aes(HAI, alpha = 0.5)) + geom_histogram(stat = "bin", binwidth = 30)
df %>%
ggplot(aes(HAI, alpha = 0.5)) + geom_histogram(stat = "bin", binwidth = 20)
df %>%
ggplot(aes(HAI, alpha = 0.5)) + geom_histogram(stat = "bin", binwidth = 15)
df %>%
ggplot(aes(HAI, alpha = 0.5)) + geom_histogram(stat = "bin", binwidth = 10)
df %>%
ggplot(aes(HAI, alpha = 0.5)) + geom_histogram(stat = "bin", binwidth = 5)
df %>%
ggplot(aes(HAI, alpha = 0.5)) + geom_histogram(stat = "bin", binwidth = 8)
df %>%
ggplot(aes(HAI, alpha = 0.5)) + geom_histogram(stat = "bin", binwidth = 10)
df %>%
ggplot(aes(HAI, alpha = 0.5)) + geom_histogram(stat = "bin", binwidth = 10, color = HAI)
df %>%
ggplot(aes(HAI, alpha = 0.5)) + geom_histogram(stat = "bin", binwidth = 10, aes(fill = HAI))
df %>%
ggplot(aes(HAI, alpha = 0.5)) + geom_histogram(stat = "bin", binwidth = 10)
df %>%
ggplot(aes(HAI, alpha = 0.5)) + geom_histogram(stat = "bin", binwidth = 10, fill='#69b3a2', color='white')
df %>%
ggplot(aes(HAI, alpha = 0.5)) + geom_histogram(stat = "bin", binwidth = 10, fill='periwinkle', color='white')
ggplot2::colors
df %>%
ggplot(aes(HAI, alpha = 0.5)) + geom_histogram(stat = "bin", binwidth = 10, fill='CadetBlue', color='white')
df %>%
ggplot(aes(HAI, alpha = 0.5)) + geom_histogram(stat = "bin", binwidth = 10, fill='Indigo', color='white')
df %>%
ggplot(aes(HAI, alpha = 0.5)) + geom_histogram(stat = "bin", binwidth = 10, fill='Yellow', color='white')
df %>%
ggplot(aes(HAI, alpha = 0.5)) + geom_histogram(stat = "bin", binwidth = 10, fill='LightBlue', color='white')
df %>%
ggplot(aes(HAI, alpha = 0.5)) + geom_histogram(stat = "bin", binwidth = 10, fill='Blue', color='white')
df %>%
ggplot(aes(HAI, alpha = 0.5)) + geom_histogram(stat = "bin", binwidth = 10, fill='CadetBlue', color='white')
df %>%
ggplot(aes(HAI, alpha = 0.5)) + geom_histogram(stat = "bin", binwidth = 10, fill='CadetBlue', color='white') %>% theme_minimal()
df %>%
ggplot(aes(HAI, alpha = 0.5)) + geom_histogram(stat = "bin", binwidth = 10, fill='CadetBlue', color='white') %>% theme_minimal()
df %>%
ggplot(aes(HAI, alpha = 0.5)) + geom_histogram(stat = "bin", binwidth = 10, fill='CadetBlue', color='white') + theme_minimal()
df %>%
ggplot(aes(HAI, alpha = 0.5)) + geom_histogram(stat = "bin", binwidth = 20, fill='CadetBlue', color='white') + theme_minimal()
df %>%
ggplot(aes(HAI, alpha = 0.5)) + geom_histogram(stat = "bin", binwidth = 20, fill='CadetBlue', color='white') +
vline(x = median(df$HAI))
df %>%
ggplot(aes(HAI, alpha = 0.5)) + geom_histogram(stat = "bin", binwidth = 20, fill='CadetBlue', color='white') +
geom_vline(x = median(df$HAI))
df %>%
ggplot(aes(HAI, alpha = 0.5)) + geom_histogram(stat = "bin", binwidth = 20, fill='CadetBlue', color='white') +
geom_vline(x = median(df$HAI)) +
theme_minimal()
df %>%
ggplot(aes(HAI, alpha = 0.5)) + geom_histogram(stat = "bin", binwidth = 20, fill='CadetBlue', color='white') +
geom_vline(xintercept = median(df$HAI)) +
theme_minimal()
df %>%
ggplot(aes(HAI, alpha = 0.5)) + geom_histogram(stat = "bin", binwidth = 20, fill='CadetBlue', color='white') +
geom_vline(xintercept = median(df$HAI), lty = "dotted", col = "black") +
theme_minimal()
df %>%
ggplot(aes(HAI, alpha = 0.5)) + geom_histogram(stat = "bin", binwidth = 20, fill='CadetBlue', color='white') +
geom_vline(xintercept = median(df$HAI), lty = "dotted", col = "black") +
geom_vline(xintercept = 100, lty = "dotdash", col = "orange") +
theme_minimal()
df %>%
ggplot(aes(HAI, alpha = 0.5)) + geom_histogram(stat = "bin", binwidth = 20, fill='CadetBlue', color='white') +
geom_vline(xintercept = median(df$HAI), lty = "dotted", col = "black") +
geom_vline(xintercept = 100, lty = "dotdash", col = "orange") +
theme_minimal() + theme(legend.position = "none")
library(RColorBrewer)
my_colors <- brewer.pal(9, "Reds")
my_colors <- colorRampPalette(my_colors)(30)
class_of_country <- cut(df$HAI, 30)
df %>%
ggplot(aes(HAI, alpha = 0.5)) + geom_histogram(stat = "bin", binwidth = 10, fill='CadetBlue', color='white') +
geom_vline(xintercept = median(df$HAI), lty = "dotted", col = "black") +
geom_vline(xintercept = 100, lty = "dotdash", col = "orange") +
theme_minimal() + theme(legend.position = "none")
library(RColorBrewer)
my_colors <- brewer.pal(9, "Reds")
my_colors <- colorRampPalette(my_colors)(18)
class_of_country <- cut(df$HAI, 18)
my_colors <- my_colors[as.numeric(class_of_country)]
# Make the plot
plot(metro_areas$geometry, col=my_colors)
my_colors <- brewer.pal(9, "Blues")
my_colors <- colorRampPalette(my_colors)(18)
class_of_country <- cut(df$HAI, 18)
my_colors <- my_colors[as.numeric(class_of_country)]
# Make the plot
plot(metro_areas$geometry, col=my_colors)
df %>%
summary(HAI)
summary(df$HAI)
df %>%
arrange(HAI) %>%
top_frac(n = 0.2, HAI = HAI)
df %>%
top_frac(n = 0.2,wt = HAI)
df %>%
top_frac(n = 0.2,wt = HAI) %>%
arrange(desc(HAI))
df %>%
top_frac(n = .8, wt = HAI)
df %>%
top_frac(n = .99, wt = HAI)
df %>%
top_frac(n = -0.2, wt = HAI)
my_colors <- brewer.pal(9, "Greens")
my_colors <- colorRampPalette(my_colors)(18)
class_of_country <- cut(df$HAI, 18)
my_colors <- my_colors[as.numeric(class_of_country)]
# Make the plot
plot(metro_areas$geometry, col=my_colors)
df %>%
top_frac(n = -0.1, wt = HAI)
library(stringr)
library(dplyr)
txtfile <- 'https://raw.githubusercontent.com/palmorezm/msds/main/698/Data/NARHAI2011_2014.txt'
str <- read.delim(file = txtfile)
View(str)
str_extract_all(str, pattern = "\\d{2}")
str_extract(str, pattern = "\\d{5} ")
GeoFips <- str_extract_all(str, pattern = "\\d{5} ")
GeoFips
View(GeoFips)
View(GeoFips)
View(data.frame(GeoFips))
str_extract(str, pattern = "\\w")
str_extract(str, pattern = "\\w\\")
str_extract(str, pattern = "\w")
str_extract(str, pattern = "\\w")
str_extract(str, pattern = "\\d{5} \\w \\d")
str_extract(str, pattern = "^\\d{5} \\w \\d")
str_extract(str, pattern = "^\\d{5}")
str_extract(str, pattern = "^\\d{5}")
str_extract(str, pattern = "\\d{5}")
str_extract(str, pattern = "\\d{5} \\w")
str_extract(str, pattern = "\\d{5} \\w*")
str_extract(str, pattern = "\\d{5} \\w* \\w*")
str_extract(str, pattern = "\\d{5} \\w*, \\w*")
str_extract(str, pattern = "\\d{5} \\w*, \\w* ")
str_extract(str, pattern = "\\w*, \\w* ")
str_extract_all(str, pattern = "\\w*, \\w* ")
*
str_extract_all(str, pattern = "\\w*, \\w* ")
str_extract_all(str, pattern = "\\d{5} \\w*, \\w* ")
str_extract_all(str, pattern = "\\.")
str_extract_all(str, pattern = ".")
str_extract_all(str, pattern = "\\w. ")
every.character <- str_extract_all(str, pattern = "\\w. ")
View(every.character)
every.character <- data.frame(str_extract_all(str, pattern = "\\w. "))
View(every.character)
every.character <- data.frame(str_extract_all(str, pattern = "\\. "))
View(every.character)
every.character <- data.frame(str_extract_all(str, pattern = "."))
View(every.character)
str_extract_all(str, pattern = "\\d{5} .\\d")
str_extract_all(str, pattern = "\\d{5}.\\d")
str_extract_all(str, pattern = "\\d{5}.*\\d")
str_extract_all(str, pattern = "\\d{5}.+\\d")
str_extract_all(str, pattern = "\\d{5}+")
str_extract_all(str, pattern = "\\d{5}\\.")
str_extract_all(str, pattern = "\\d{5}*")
str_extract_all(str, pattern = "\\d{5}.")
str_extract_all(str, pattern = "\\d.")
str_extract_all(str, pattern = "\\d{5}\\w.")
str_extract_all(str, pattern = "\\d{5}\\w+")
str_extract_all(str, pattern = "\\d{5}.")
str_extract_all(str, pattern = "\\d{5}.\\d")
str_extract_all(str, pattern = "\\d{5}.*?\\d")
str_extract_all(str, pattern = "\\d.*?\\d")
{5}
str_extract_all(str, pattern = "\\d{5}.*?\\d")
str_extract_all(str, pattern = ".*?")
str_match_all(str, pattern = "\\d{5}*(.*?)\\d")
str_match_all(str, pattern = "\\d{5}(.*?)\\d")
str_match_all(str, pattern = "\\d{5}(.*?)\\d")
str_match_all(str, pattern = "\\d{5}(.*?)\\d")
str_detect(str, pattern = "##### \\.*? #####")
str_extract(str, pattern = "##### \\.*? #####")
str_extract(str, pattern = "##### \\.* #####")
str_extract(str, pattern = "##### \\. #####")
str_extract(str, pattern = "#\\.*?#")
str_match_all(str, pattern = "#(.*?)#")
str_match_all(str, pattern = "\#(.*?)#")
str_match_all(str, pattern = "\\#(.*?)#")
str_match_all(str, pattern = "\\#(.*?)#\\.")
str_match_all(str, pattern = "\\#(.*?)#")
str_match_all(str, pattern = "#(.*?)#")
str_remove_all(str, pattern = "#(.*?)#")
View(str_remove_all(str, pattern = "#(.*?)#"))
View(data.frame(str_remove_all(str, pattern = "#(.*?)#")))
View(data.frame(str_remove_all(str, pattern = "#(.*?)#")))
View(str_remove_all(str, pattern = "#(.*?)#"))
str_remove_all(str, pattern = "#(.*?)#")
str <- str_remove_all(str, pattern = "#(.*?)#")
str_extract_all(str, pattern = "\\d{5} ")
str_extract_all(str, pattern = "\\d{5}")
GeoFips <- str_extract_all(str, pattern = "\\d{5}") # GeoFips location (*unique*) ID
str_extract_all(str, pattern = "\\d{5}.*?\\d")
str_match_all(str, pattern = "\\d{5}(.*?)\\d")
str_match_all(str, pattern = "\\d{5}(.*?)\\.")
str_match_all(str, pattern = "\\d{5}(.*?)")
str_match_all(str, pattern = "\\d{5}(.*?)\\.*")
str_match_all(str, pattern = "\\d{5}(.*?)\\d")
str_match_all(str, pattern = "\\d{5}(.*?) ")
str_match_all(str, pattern = "\\d{5}.*? ")
str_match_all(str, pattern = "\\d{5}(.*?)\\d")
str_extract_all(str, pattern = "\\d{5}(.*?)\\ ")
str_extract_all(str, pattern = "(.*?)\\ ")
str_extract_all(str, pattern = "\\d{5}(.*?)\\.")
str_extract_all(str, pattern = "\\d{5}(.*?)\\.")
str_match_all(str, pattern = "\\d{5}(.*?)\\.")
str_match_all(str, pattern = "\\d{5}(.*?)\\d")
str_match_all(str, pattern = "\\\{} (.*?) \\d")
str_match_all(str, pattern = "\\d{5} (.*?) \\d")
str_match_all(str, pattern = "^#.*?\t"
str_match_all(str, pattern = "^#.*?\t")
str_match_all(str, pattern = "^#.*?\t")
str_match_all(str, pattern = "^#(.*?)\t")
str_match_all(str, pattern = "^#(.*?)#\t")
str_match_all(str, pattern = "^#(.*?) \t")
str_match_all(str, pattern = "#(.*?) \t")
str_match_all(str, pattern = "# (.*?) \t")
str_extract_all(str, pattern = "# (.*?) \t")
str_extract_all(str, pattern = "^#(.*?)#\t")
str_extract_all(str, pattern = "^#(.*?)#\\t")
str_extract_all(str, pattern = "^#(.*?)#\t")
str_extract_all(str, pattern = "^#(.*?)#\t")
sed(str, "#(.*?)#\t")
str_sub(str, "#(.*?)#\t")
str_sub(str, "#(.*?) \t")
str_sub(str, "#(.*?)# \t")
str_extract(str, "#(.*?)# \t")
str_extract(str, pattern = "#(.*?)#")
str_extract_all(str, pattern = "#(.*?)#")
# Import the files
txtfile <- 'https://raw.githubusercontent.com/palmorezm/msds/main/698/Data/NARHAI2011_2014.txt'
str <- read.delim(file = txtfile)
every.character <- data.frame(str_extract_all(str, pattern = ".")) # Visualize raw string for patterns
str_extract_all(str, pattern = "#(.*?)#")
str_extract_all(str, pattern = "^#(.*?)#\t")
str_match_all(str, pattern = "\\d{5} (.*?) \\d")
str_match_all(str, pattern = "#(.*?)#")
str_match_all(str, pattern = "^#(.*?)#")
str_match_all(str, pattern = "#####(.*?)#####")
str_match_all(str, pattern = "#####(.*?)#####\t")
str_match_all(str, pattern = "#####(.*?)#####")
str_match_all(str, pattern = "##### (.*?) #####")
str_remove_all(str, pattern = "##### (.*?) #####")
str_remove_all(str, pattern = "\n##### (.*?) #####")
str_remove_all(str, pattern = "\n##### (.*?) #####")
str_remove_all(str, pattern = "##### (.*?) #####")
str_remove_all(str, pattern = "##### (.*?) #####\\\")
\
\
\\
\\.\
\\.
str_remove_all(str, pattern = "##### (.*?) #####\\")
str_remove_all(str, pattern = "##### (.*?) #####\t")
str_remove_all(str, pattern = "##### (.*?) #####\\t")
str_remove_all(str, pattern = "\\##### (.*?) #####")
str_remove_all(str, pattern = "\\n##### (.*?) #####")
str_remove_all(str, pattern = "\n##### (.*?) #####")
str_remove_all(str, pattern = "\\\\\##### (.*?) #####")
str_remove_all(str, pattern = "\\\\##### (.*?) #####")
str_remove_all(str, pattern = "##### (.*?) #####")
str <- str_remove_all(str, pattern = "##### (.*?) #####")
str <- str_remove_all(str, pattern = "##### (.*?) #####")
str
str_extract_all(str, pattern = "\\d{5}")
GeoFips <- str_extract_all(str, pattern = "\\d{5}")
writeLines(str)
str_remove_all(str, "")
str_match_all()
str_match_all(str, "")
str_match_all(str, "()")
str_match_all(str, "")
str_extract_all(str, pattern = "\\d{5} \\w*, \\w* ")
str_match_all(str, pattern = "\\d{5}(.*?)\\d")
str_match_all(str, pattern = "\\d{5} (.*?) \\d")
str_match_all(str, pattern = "\\d{5} (.*?) \\.")
str_match_all(str, pattern = "\\d{5} (.*?) \\d")
str_extract_all(str, pattern = "\\d{5} (.*?) \\d")
str_extract_all(str, pattern = "\\d{5} (.*?) \\.")
str_extract_all(str, pattern = "\\d{5} (.*?) ")
str_extract_all(str, pattern = "\\d{5} (.*?)(.*?) ")
str_extract_all(str, pattern = "\\d{5} (.*?), \W")
str_extract_all(str, pattern = "\\d{5} (.*?) \W")
str_extract_all(str, pattern = "\\d{5} (.*?) \\w")
str_extract_all(str, pattern = "\\d{5} (.*?) \\w{2}")
str_extract_all(str, pattern = "\\d{5} (.*?) \\w{2} ")
str_extract_all(str, pattern = "(.*?) \\w{2} ")
str_match_all(str, pattern = "(.*?) \\w{2} ")
str_match_all(str, pattern = "(.*?) \\w{2} ")
str_extract_all(str, pattern = "\\d{5} (.*?) \\w{2} ")
str_extract_all(str, pattern = "\\d{5} (.*?) \\w{2} ")
str_extract_all(str, pattern = "\\d{5} (.*?) \\w{2}")
str_extract_all(str, pattern = "\\d{5} (.*?) \\W{2}")
str_extract_all(str, pattern = "\\d{5} (.*?) \\w*")
str_extract_all(str, pattern = "\\d{5} (.*?) \\w* ")
str_match_all(str, pattern = "(.*?) \\w{2} ")
str_match_all(str, pattern = "(.*?),")
str_match_all(str, pattern = "(.*?),\\w{2}")
str_match_all(str, pattern = "(.*?), \\w{2}")
str_extract_all(str, pattern = "//d{5} (.*?), \\w*")
str_extract_all(str, pattern = "//d{5} (.*?), \\w")
str_extract_all(str, pattern = "//d{5} (.*?)\\,")
str_extract_all(str, pattern = "//d{5} (.*?)\\.,")
str_extract_all(str, pattern = "//d{5} (.*?,)")
str_extract_all(str, pattern = "//d{5} (.*?),")
str_extract_all(str, pattern = "\\d{5} (.*?),")
str_extract_all(str, pattern = "\\d{5} (.*?), \\w")
str_extract_all(str, pattern = "\\d{5} (.*?), \\w{2}")
metro_name <- str_extract_all(str, pattern = "\\d{5} (.*?), \\w{2}")
str_extract_all(str, pattern = "(.*?), \\w{2}"
str_extract_all(str, pattern = "(.*?), \\w{2}")
str_extract_all(str, pattern = "(.*?), \\w{2}")
str_extract_all(str, pattern = "\\d{5} ")
str_remove_all(str, pattern = "\\d{5} ")
str_remove_all(metro_name, pattern = "\\d{5} ")
metro_name <- str_remove_all(metro_name, pattern = "\\d{5} ") # geofips not needed in the name
str_extract_all(metro_name, "\\w{2}")
str_extract_all(metro_name, "$\\w{2}")
str_extract_all(metro_name, "\\w{2}$")
str_extract_all(metro_name, "\\$\\w{2}")
str_extract_all(metro_name, "$w{2}")
str_match_all(metro_name, "$w{2}")
str_match_all(metro_name, "$\\w{2}")
str_match_all(metro_name, "\\w{2}$")
str_match_all(metro_name, "\\w{2}$")
str_match_all(metro_name, "\\(w{2})$")
str_match_all(metro_name, "(\\w{2})$")
View(metro_name)
str_match_all(metro_name, "\\w$")
str_match_all(metro_name, "\\w*$")
str_match_all(metro_name, ",$")
str_extract_all(metro_name, ",$")
str_extract_all(metro_name, "\\w$")
str_extract_all(metro_name, "\\w{*}$")
str_extract_all(metro_name, "\\w*$")
data.frame(metro_name)
str_match_all(str, " \\d* ")
str_match_all(str, " \\d ")
str_match_all(str, " \\d{3} ")
str_match_all(str, " \\d. ")
str_match_all(str, " \\d ")
str_extract_all(str, " \\d ")
str_extract_all(str, " \\d")
str_extract_all(str, " \\d* ")
str_extract_all(str, " \\d{1-3}\\.\\d ")
str_extract_all(str, " \\d{1,3}\\.\\d ")
writeLines(str)
writeLines(metro_name)
View(writeLines(metro_name))
View(data.frame(writeLines(metro_name)))
# Import the files
txtfile <- 'https://raw.githubusercontent.com/palmorezm/msds/main/698/Data/NARHAI2011_2014.txt'
str <- read.delim(file = txtfile)
every.character <- data.frame(str_extract_all(str, pattern = ".")) # Visualize raw string for patterns
# Get stringy
str <- str_remove_all(str, pattern = "##### (.*?) #####") # Remove junk inbetweens
GeoFips <- str_extract_all(str, pattern = "\\d{5}") # GeoFips location (*unique*) ID
str_extract_all(str, pattern = "\\d{5} \\w*, \\w* ")
str_extract_all(str, " \\d{1,3}\\.\\d ")
str_extract(str, " \\d{1,3}\\.\\d ")
str_match_all(str, "\\w{2} (.*?)")
str_match_all(str, "\\w (.*?)")
str_match_all(str, "\\w (.*?)\\d")
str_match_all(str, "\\w (.*?)\\d*")
str_match_all(str, "\\d (.*?)")
str_match_all(str, "(.*?)")
str_match_all(str, "\\d{1,4}")
str_match_all(str, "\\d{1,4}\\.\\d{1}")
str_match_all(str, "\\d{1,4}\\.\\d{1}")
nums <- str_match_all(str, "\\d{1,4}\\.\\d{1}")
str_extract(nums, "\\d{1,3}")
str_extract(nums, "\\d{1,4}")
str_extract(nums, "\\d{1,4}\\.\\d")
str_extract_all(nums, "\\d{1,4}\\.\\d")
str_extract_all(nums, "^\\d{1,4}\\.\\d")
str_extract_all(nums, "^ \\d{1,4}\\.\\d")
str_extract_all(nums, "^\\d{1,4}\\.\\d")
str_extract(nums, "^\\d"
str_extract(nums, "^\\d")
str_extract(nums, "^\\d{1,3}")
str_extract(nums, "^\\d?")
str_extract(nums, "^?")
str_extract(nums, "^")
str_extract(nums, "\\^")
str_extract(nums, "\\^.")
str_extract(nums, "^.")
writeLines(str)
writeLines(nums)
writeLines(str)
str2 <- writeLines(str)
str_extract_all(str, "\\d{1,3}\\.\\d{1}")
num <- str_extract_all(str, "\\d{1,3}\\.\\d{1}")
str_match(num, "^\\d")
str_match(num, "\\d")
str_match(num, "\\d{3}")
str_match(num, "\\d{1,3}")
str_match(num, "\\d{1,3}\\.\\d{1}")
str_match(num, "\\d{1,3}\\.\\d{1}")
str_match_all(num, "\\d{1,3}\\.\\d{1}")
str_extract_all(num, "\\d{1,3}\\.\\d{1}")
str_match_all(num, "\\d{1,3}\\.\\d{1}")
str_match_all(num, "\\d{1,3}\\.\\d{1}")
str_match_all(num, "^\\d{1,3}\\.\\d{1}")
str_match_all(num, "^\\d{1,3}\\.\\d{1}")[,1]
str_match_all(num, "^\\d{1,3}\\.\\d{1}")[,2]
str_match_all(num, "^\\d{1,3}\\.\\d{1}")
str_match_all(num, "^\\d{1,3}\\.\\d{1}")
str_match_all(num, "\\d{1,3}\\.\\d{1}")
