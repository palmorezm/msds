merged.df.2017 <- merge(df1, df2, by = "GeoFips")
# 2016
df1 <- minc %>%
filter(year == 2016 & LineCode == 3) %>%
dplyr::select("GeoFips", "GeoName", "year", "value") %>%
slice(-1)
df2 <- mhv %>%
rename(value = MedianValue,
year = Year) %>%
dplyr::select("GeoFips", "GeoName", "year", "value") %>%
filter(year == 2016)
merged.df.2016 <- merge(df1, df2, by = "GeoFips")
# 2015
df1 <- minc %>%
filter(year == 2015 & LineCode == 3) %>%
dplyr::select("GeoFips", "GeoName", "year", "value") %>%
slice(-1)
df2 <- mhv %>%
rename(value = MedianValue,
year = Year) %>%
dplyr::select("GeoFips", "GeoName", "year", "value") %>%
filter(year == 2015)
merged.df.2015 <- merge(df1, df2, by = "GeoFips")
# 2014
df1 <- minc %>%
filter(year == 2014 & LineCode == 3) %>%
dplyr::select("GeoFips", "GeoName", "year", "value") %>%
slice(-1)
df2 <- mhv %>%
rename(value = MedianValue,
year = Year) %>%
dplyr::select("GeoFips", "GeoName", "year", "value") %>%
filter(year == 2014)
merged.df.2014 <- merge(df1, df2, by = "GeoFips")
# 2013
df1 <- minc %>%
filter(year == 2013 & LineCode == 3) %>%
dplyr::select("GeoFips", "GeoName", "year", "value") %>%
slice(-1)
df2 <- mhv %>%
rename(value = MedianValue,
year = Year) %>%
dplyr::select("GeoFips", "GeoName", "year", "value") %>%
filter(year == 2013)
merged.df.2013 <- merge(df1, df2, by = "GeoFips")
# 2012
df1 <- minc %>%
filter(year == 2012 & LineCode == 3) %>%
dplyr::select("GeoFips", "GeoName", "year", "value") %>%
slice(-1)
df2 <- mhv %>%
rename(value = MedianValue,
year = Year) %>%
dplyr::select("GeoFips", "GeoName", "year", "value") %>%
filter(year == 2012)
merged.df.2012 <- merge(df1, df2, by = "GeoFips")
# 2011
df1 <- minc %>%
filter(year == 2011 & LineCode == 3) %>%
dplyr::select("GeoFips", "GeoName", "year", "value") %>%
slice(-1)
df2 <- mhv %>%
rename(value = MedianValue,
year = Year) %>%
dplyr::select("GeoFips", "GeoName", "year", "value") %>%
filter(year == 2011)
merged.df.2011 <- merge(df1, df2, by = "GeoFips")
# 2010
df1 <- minc %>%
filter(year == 2010 & LineCode == 3) %>%
dplyr::select("GeoFips", "GeoName", "year", "value") %>%
slice(-1)
df2 <- mhv %>%
rename(value = MedianValue,
year = Year) %>%
dplyr::select("GeoFips", "GeoName", "year", "value") %>%
filter(year == 2010)
merged.df.2010 <- merge(df1, df2, by = "GeoFips")
# Review Merges
merged.df <- rbind(merged.df.2019, merged.df.2018,
merged.df.2017, merged.df.2016,
merged.df.2015, merged.df.2014,
merged.df.2013, merged.df.2012,
merged.df.2011, merged.df.2010)
# Rename and drop columns
merged.df <- merged.df %>%
dplyr::select(-GeoName.y, -year.y)
colnames(merged.df) <- c("GeoFips",
"GeoName", "year", "MEDINC", "MEDVAL")
View(merged.df)
merged.df %>%
mutate(IR = 0.035,
PMT = MEDVAL * 0.8 * (IR / 12)/(1 - (1/(1 + IR/12)^360)),
QINC = PMT * 4 * 12,
HAI = (MEDINC / QINC) * 100) %>%
filter(HAI >= 0 & HAI <= 500) %>%
arrange(desc(HAI)) %>% View()
library(ggplot2)
data.frame(matrix(c('<100', '101-10,000', '10,001+', 94, 98, 129), nrow = 3, ncol = 2))
df <- data.frame(
matrix(c('<100', '101-10,000', '10,001+', 94, 98, 129), nrow = 3, ncol = 2))
as.numeric(df$X2)
df$X2 <- as.numeric(df$X2)
ggplot(df, aes(X1, X2)) + geom_col()
ggplot(df, aes(X1, X2)) + geom_col(aes(fill =X2))
ggplot(df, aes(X1, X2)) + geom_col(aes(fill=X2))
129 - 94
# MS Analytics Capstone
# Restring GEOID to GEOFIPS
# Dataset: Median Home Values
# Sources: U.S.Census (ACS)
# data.census.gov
# Packages
library(dplyr)
library(tidyr)
library(stringr)
#### Start with Median Home Values ####
mhv <- data.frame(read.csv("https://raw.githubusercontent.com/palmorezm/msds/main/698/Data/mhv.csv"))
# Compare GEOID and GeoName
# GEOID Filter:
mhv %>%
filter(GEOID == "310M100US10180")
#     X       GEOID           GeoName          MedianValue  MOE Year
# 1    4 310M100US10180 Abilene, TX Metro Area       83400 2009 2010
# 2  959 310M100US10180 Abilene, TX Metro Area       84800 1914 2011
# 3 1914 310M100US10180 Abilene, TX Metro Area       89300 2515 2012
# GeoName Filter:
mhv %>%
filter(GeoName == "Abilene, TX Metro Area")
#      X    GEOID                GeoName        MedianValue  MOE Year
# 1     4 310M100US10180 Abilene, TX Metro Area       83400 2009 2010
# 2   959 310M100US10180 Abilene, TX Metro Area       84800 1914 2011
# 3  1914 310M100US10180 Abilene, TX Metro Area       89300 2515 2012
# 4  2868 310M200US10180 Abilene, TX Metro Area       89000 2139 2013
# 5  3797 310M200US10180 Abilene, TX Metro Area       91900 2825 2014
# 6  4726 310M200US10180 Abilene, TX Metro Area       94000 2341 2015
# 7  5655 310M300US10180 Abilene, TX Metro Area       98200 1916 2016
# 8  6600 310M300US10180 Abilene, TX Metro Area      102000 2634 2017
# 9  7545 310M400US10180 Abilene, TX Metro Area      110100 3327 2018
# 10 8490 310M500US10180 Abilene, TX Metro Area      116100 2841 2019
# Results
# GEOID filter returns 3 total entries, all with exactly the same GEOID.
# GeoName returns 10 total entries, all with exactly the same GeoName
# Difference is GEOID reference changes middle value but not last 5 digits
# Last 5 digits of GEOID are equivalent to GEOFIPS
# Slice to extract the GEOFIPS from GEOID for Abilene, TX metro
geostring <- as.character(mhv$GEOID)
GeoFips <- str_extract(geostring, "\\d{5}$")
mhv$GeoFips <- GeoFips
# Check that there are matches to GeoFips
################### Rerun Minc Data Extraction Tidying ######
# Income, Population, & Per Capita Income by MSA from 2008 to 2019
# Extraction
cainc1 <- data.frame(read.csv(
"https://raw.githubusercontent.com/palmorezm/msds/main/698/Data/cainc1_msa_11yr.csv"))
cainc1 <- cainc1[4:nrow(cainc1),]
colnames(cainc1) <- cainc1[1,]
cainc1 <- cainc1[-1,]
# Tidying
minc <- cainc1 %>%
gather(year, value, -GeoFips,
-GeoName, -LineCode, -Description)
minc.personalincome <- subset(minc, LineCode==1)
minc.population <- subset(minc, LineCode==2)
minc.percapitaincome<- subset(minc, LineCode==3)
minc <- rbind(minc.personalincome, minc.population, minc.percapitaincome)
################## End Minc Rerun ############################
# Prepare for test Merge
df1 <- minc %>%
filter(year == 2019 & LineCode == 3) %>%
dplyr::select("GeoFips", "GeoName", "year", "value") %>%
slice(-1)
df2 <- mhv %>%
rename(value = MedianValue,
year = Year) %>%
dplyr::select("GeoFips", "GeoName", "year", "value") %>%
filter(year == 2019)
# Test merge for 2019
merged.df.2019 <- merge(df1, df2, by = "GeoFips")
# Complete and functioning - for 2019
# 2018
df1 <- minc %>%
filter(year == 2018 & LineCode == 3) %>%
dplyr::select("GeoFips", "GeoName", "year", "value") %>%
slice(-1)
df2 <- mhv %>%
rename(value = MedianValue,
year = Year) %>%
dplyr::select("GeoFips", "GeoName", "year", "value") %>%
filter(year == 2018)
merged.df.2018 <- merge(df1, df2, by = "GeoFips")
# 2017
df1 <- minc %>%
filter(year == 2017 & LineCode == 3) %>%
dplyr::select("GeoFips", "GeoName", "year", "value") %>%
slice(-1)
df2 <- mhv %>%
rename(value = MedianValue,
year = Year) %>%
dplyr::select("GeoFips", "GeoName", "year", "value") %>%
filter(year == 2017)
merged.df.2017 <- merge(df1, df2, by = "GeoFips")
# 2016
df1 <- minc %>%
filter(year == 2016 & LineCode == 3) %>%
dplyr::select("GeoFips", "GeoName", "year", "value") %>%
slice(-1)
df2 <- mhv %>%
rename(value = MedianValue,
year = Year) %>%
dplyr::select("GeoFips", "GeoName", "year", "value") %>%
filter(year == 2016)
merged.df.2016 <- merge(df1, df2, by = "GeoFips")
# 2015
df1 <- minc %>%
filter(year == 2015 & LineCode == 3) %>%
dplyr::select("GeoFips", "GeoName", "year", "value") %>%
slice(-1)
df2 <- mhv %>%
rename(value = MedianValue,
year = Year) %>%
dplyr::select("GeoFips", "GeoName", "year", "value") %>%
filter(year == 2015)
merged.df.2015 <- merge(df1, df2, by = "GeoFips")
# 2014
df1 <- minc %>%
filter(year == 2014 & LineCode == 3) %>%
dplyr::select("GeoFips", "GeoName", "year", "value") %>%
slice(-1)
df2 <- mhv %>%
rename(value = MedianValue,
year = Year) %>%
dplyr::select("GeoFips", "GeoName", "year", "value") %>%
filter(year == 2014)
merged.df.2014 <- merge(df1, df2, by = "GeoFips")
# 2013
df1 <- minc %>%
filter(year == 2013 & LineCode == 3) %>%
dplyr::select("GeoFips", "GeoName", "year", "value") %>%
slice(-1)
df2 <- mhv %>%
rename(value = MedianValue,
year = Year) %>%
dplyr::select("GeoFips", "GeoName", "year", "value") %>%
filter(year == 2013)
merged.df.2013 <- merge(df1, df2, by = "GeoFips")
# 2012
df1 <- minc %>%
filter(year == 2012 & LineCode == 3) %>%
dplyr::select("GeoFips", "GeoName", "year", "value") %>%
slice(-1)
df2 <- mhv %>%
rename(value = MedianValue,
year = Year) %>%
dplyr::select("GeoFips", "GeoName", "year", "value") %>%
filter(year == 2012)
merged.df.2012 <- merge(df1, df2, by = "GeoFips")
# 2011
df1 <- minc %>%
filter(year == 2011 & LineCode == 3) %>%
dplyr::select("GeoFips", "GeoName", "year", "value") %>%
slice(-1)
df2 <- mhv %>%
rename(value = MedianValue,
year = Year) %>%
dplyr::select("GeoFips", "GeoName", "year", "value") %>%
filter(year == 2011)
merged.df.2011 <- merge(df1, df2, by = "GeoFips")
# 2010
df1 <- minc %>%
filter(year == 2010 & LineCode == 3) %>%
dplyr::select("GeoFips", "GeoName", "year", "value") %>%
slice(-1)
df2 <- mhv %>%
rename(value = MedianValue,
year = Year) %>%
dplyr::select("GeoFips", "GeoName", "year", "value") %>%
filter(year == 2010)
merged.df.2010 <- merge(df1, df2, by = "GeoFips")
# Review Merges
merged.df <- rbind(merged.df.2019, merged.df.2018,
merged.df.2017, merged.df.2016,
merged.df.2015, merged.df.2014,
merged.df.2013, merged.df.2012,
merged.df.2011, merged.df.2010)
# Rename and drop columns
merged.df <- merged.df %>%
dplyr::select(-GeoName.y, -year.y)
colnames(merged.df) <- c("GeoFips",
"GeoName", "year", "MEDINC", "MEDVAL")
View(merged.df)
# All metros 2010 through 2019
df_mapping <- merged.df %>%
mutate(IR = 0.035,
PMT = MEDVAL * 0.8 * (IR / 12)/(1 - (1/(1 + IR/12)^360)),
QINC = PMT * 4 * 12,
HAI = (MEDINC / QINC) * 100) %>%
filter(HAI >= 0 & HAI <= 500) %>%
arrange(desc(HAI))
counties <- rjson::fromJSON(file="https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json")
# Data comes from "HAIEstimates.R" and "GEOID_GEOFIPS.R"
df <- df_mapping %>%
filter(year == "2019")
csa <- tigris::combined_statistical_areas()
cores <- tigris::core_based_statistical_areas()
View(cores)
library(dplyr)
library(tidyr)
library(rjson)
library(tigris)
View(cores)
cores %>%
filter(LSAD == M1)
cores %>%
filter(LSAD == "M1")
metro_areas <- cores %>%
filter(LSAD == "M1")
View(metro_areas)
View(df_mapping)
View(df)
tempdir()
dir.create(tempdir())
plot(metro_areas)
plot(metro_areas$CBSAFP, col = df$HAI)
plot(metro_areas$CBSAFP)
plot(metro_areas$CBSAFP)
plot(metro_areas$GEOID)
metro_areas$geometry
metros <- metro_areas$CBSAFP
metros$geometry <- metro_areas$geometry
metros
metros$``
plot(metros)
metro_areas %>%
filter(GEOID == 33260)
metro_areas %>%
filtr(GEOID == 19180)
metro_areas %>%
filter(GEOID == 19180)
metro_areas %>%
filter(GEOID == 19500)
plot(metro_areas$GEOID)
plot(metro_areas$GEOID)
plot(metro_areas$GEOID, col = df$HAI)
plot(metros)
plot(metro_areas$geometry)
plot(metro_areas$geometry, df$HAI)
plot(metro_areas$geometry, col = df$HAI)
library(ggplot2)
df$HAI %>%
ggplot() + geom_histogram()
df %>%
ggplot(aes(HAI)) + geom_histogram()
df %>%
ggplot(aes(HAI)) + geom_histogram(aes(color = HAI))
df %>%
ggplot(aes(HAI)) + geom_histogram(aes(fill = HAI))
df %>%
ggplot(aes(HAI)) + geom_histogram(aes(fill = QINC))
df %>%
ggplot(aes(HAI, alpha = 0.5)) + geom_histogram()
df %>%
ggplot(aes(HAI, alpha = 0.5, fill = HAI)) + geom_histogram()
df %>%
ggplot(aes(HAI, alpha = 0.5, color = HAI)) + geom_histogram()
df %>%
ggplot(aes(HAI, alpha = 0.5)) + geom_histogram(stat = "count")
df %>%
ggplot(aes(HAI, alpha = 0.5)) + geom_histogram(stat = "identity")
df %>%
ggplot(aes(HAI, alpha = 0.5)) + geom_histogram(stat = "bin")
df %>%
ggplot(aes(HAI, alpha = 0.5)) + geom_histogram(stat = "bin", binwidth = 10)
df %>%
ggplot(aes(HAI, alpha = 0.5)) + geom_histogram(stat = "bin", binwidth = 40)
df %>%
ggplot(aes(HAI, alpha = 0.5)) + geom_histogram(stat = "bin", binwidth = 30)
df %>%
ggplot(aes(HAI, alpha = 0.5)) + geom_histogram(stat = "bin", binwidth = 20)
df %>%
ggplot(aes(HAI, alpha = 0.5)) + geom_histogram(stat = "bin", binwidth = 15)
df %>%
ggplot(aes(HAI, alpha = 0.5)) + geom_histogram(stat = "bin", binwidth = 10)
df %>%
ggplot(aes(HAI, alpha = 0.5)) + geom_histogram(stat = "bin", binwidth = 5)
df %>%
ggplot(aes(HAI, alpha = 0.5)) + geom_histogram(stat = "bin", binwidth = 8)
df %>%
ggplot(aes(HAI, alpha = 0.5)) + geom_histogram(stat = "bin", binwidth = 10)
df %>%
ggplot(aes(HAI, alpha = 0.5)) + geom_histogram(stat = "bin", binwidth = 10, color = HAI)
df %>%
ggplot(aes(HAI, alpha = 0.5)) + geom_histogram(stat = "bin", binwidth = 10, aes(fill = HAI))
df %>%
ggplot(aes(HAI, alpha = 0.5)) + geom_histogram(stat = "bin", binwidth = 10)
df %>%
ggplot(aes(HAI, alpha = 0.5)) + geom_histogram(stat = "bin", binwidth = 10, fill='#69b3a2', color='white')
df %>%
ggplot(aes(HAI, alpha = 0.5)) + geom_histogram(stat = "bin", binwidth = 10, fill='periwinkle', color='white')
ggplot2::colors
df %>%
ggplot(aes(HAI, alpha = 0.5)) + geom_histogram(stat = "bin", binwidth = 10, fill='CadetBlue', color='white')
df %>%
ggplot(aes(HAI, alpha = 0.5)) + geom_histogram(stat = "bin", binwidth = 10, fill='Indigo', color='white')
df %>%
ggplot(aes(HAI, alpha = 0.5)) + geom_histogram(stat = "bin", binwidth = 10, fill='Yellow', color='white')
df %>%
ggplot(aes(HAI, alpha = 0.5)) + geom_histogram(stat = "bin", binwidth = 10, fill='LightBlue', color='white')
df %>%
ggplot(aes(HAI, alpha = 0.5)) + geom_histogram(stat = "bin", binwidth = 10, fill='Blue', color='white')
df %>%
ggplot(aes(HAI, alpha = 0.5)) + geom_histogram(stat = "bin", binwidth = 10, fill='CadetBlue', color='white')
df %>%
ggplot(aes(HAI, alpha = 0.5)) + geom_histogram(stat = "bin", binwidth = 10, fill='CadetBlue', color='white') %>% theme_minimal()
df %>%
ggplot(aes(HAI, alpha = 0.5)) + geom_histogram(stat = "bin", binwidth = 10, fill='CadetBlue', color='white') %>% theme_minimal()
df %>%
ggplot(aes(HAI, alpha = 0.5)) + geom_histogram(stat = "bin", binwidth = 10, fill='CadetBlue', color='white') + theme_minimal()
df %>%
ggplot(aes(HAI, alpha = 0.5)) + geom_histogram(stat = "bin", binwidth = 20, fill='CadetBlue', color='white') + theme_minimal()
df %>%
ggplot(aes(HAI, alpha = 0.5)) + geom_histogram(stat = "bin", binwidth = 20, fill='CadetBlue', color='white') +
vline(x = median(df$HAI))
df %>%
ggplot(aes(HAI, alpha = 0.5)) + geom_histogram(stat = "bin", binwidth = 20, fill='CadetBlue', color='white') +
geom_vline(x = median(df$HAI))
df %>%
ggplot(aes(HAI, alpha = 0.5)) + geom_histogram(stat = "bin", binwidth = 20, fill='CadetBlue', color='white') +
geom_vline(x = median(df$HAI)) +
theme_minimal()
df %>%
ggplot(aes(HAI, alpha = 0.5)) + geom_histogram(stat = "bin", binwidth = 20, fill='CadetBlue', color='white') +
geom_vline(xintercept = median(df$HAI)) +
theme_minimal()
df %>%
ggplot(aes(HAI, alpha = 0.5)) + geom_histogram(stat = "bin", binwidth = 20, fill='CadetBlue', color='white') +
geom_vline(xintercept = median(df$HAI), lty = "dotted", col = "black") +
theme_minimal()
df %>%
ggplot(aes(HAI, alpha = 0.5)) + geom_histogram(stat = "bin", binwidth = 20, fill='CadetBlue', color='white') +
geom_vline(xintercept = median(df$HAI), lty = "dotted", col = "black") +
geom_vline(xintercept = 100, lty = "dotdash", col = "orange") +
theme_minimal()
df %>%
ggplot(aes(HAI, alpha = 0.5)) + geom_histogram(stat = "bin", binwidth = 20, fill='CadetBlue', color='white') +
geom_vline(xintercept = median(df$HAI), lty = "dotted", col = "black") +
geom_vline(xintercept = 100, lty = "dotdash", col = "orange") +
theme_minimal() + theme(legend.position = "none")
library(RColorBrewer)
my_colors <- brewer.pal(9, "Reds")
my_colors <- colorRampPalette(my_colors)(30)
class_of_country <- cut(df$HAI, 30)
df %>%
ggplot(aes(HAI, alpha = 0.5)) + geom_histogram(stat = "bin", binwidth = 10, fill='CadetBlue', color='white') +
geom_vline(xintercept = median(df$HAI), lty = "dotted", col = "black") +
geom_vline(xintercept = 100, lty = "dotdash", col = "orange") +
theme_minimal() + theme(legend.position = "none")
library(RColorBrewer)
my_colors <- brewer.pal(9, "Reds")
my_colors <- colorRampPalette(my_colors)(18)
class_of_country <- cut(df$HAI, 18)
my_colors <- my_colors[as.numeric(class_of_country)]
# Make the plot
plot(metro_areas$geometry, col=my_colors)
my_colors <- brewer.pal(9, "Blues")
my_colors <- colorRampPalette(my_colors)(18)
class_of_country <- cut(df$HAI, 18)
my_colors <- my_colors[as.numeric(class_of_country)]
# Make the plot
plot(metro_areas$geometry, col=my_colors)
df %>%
summary(HAI)
summary(df$HAI)
df %>%
arrange(HAI) %>%
top_frac(n = 0.2, HAI = HAI)
df %>%
top_frac(n = 0.2,wt = HAI)
df %>%
top_frac(n = 0.2,wt = HAI) %>%
arrange(desc(HAI))
df %>%
top_frac(n = .8, wt = HAI)
df %>%
top_frac(n = .99, wt = HAI)
df %>%
top_frac(n = -0.2, wt = HAI)
my_colors <- brewer.pal(9, "Greens")
my_colors <- colorRampPalette(my_colors)(18)
class_of_country <- cut(df$HAI, 18)
my_colors <- my_colors[as.numeric(class_of_country)]
# Make the plot
plot(metro_areas$geometry, col=my_colors)
df %>%
top_frac(n = -0.1, wt = HAI)
fileName <- 'https://raw.githubusercontent.com/palmorezm/msds/main/698/Data/NARHAI2011_2014.txt'
readChar(fileName, file.info(fileName)$size)
fileName <- 'https://raw.githubusercontent.com/palmorezm/msds/main/698/Data/NARHAI2011_2014.txt'
readChar(fileName, file.info(fileName)$size)
read.delim(file = fileName)
??read.delim()
read.delim(file = fileName, skip = 1)
read.delim(file = fileName)
str <- read.delim(file = fileName)
# Packages
library(stringr)
library(dplyr)
str_extract(str, pattern = "\d{2}")
str_extract(str, pattern = "\\d{2}")
str_extract_all(str, pattern = "\\d{2}")
str_extract_all(str, pattern = "\\d{2}%")
str_extract_all(str, pattern = "\\d{2}")
