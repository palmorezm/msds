str_extract(str, pattern = "\w")
str_extract(str, pattern = "\\w")
str_extract(str, pattern = "\\d{5} \\w \\d")
str_extract(str, pattern = "^\\d{5} \\w \\d")
str_extract(str, pattern = "^\\d{5}")
str_extract(str, pattern = "^\\d{5}")
str_extract(str, pattern = "\\d{5}")
str_extract(str, pattern = "\\d{5} \\w")
str_extract(str, pattern = "\\d{5} \\w*")
str_extract(str, pattern = "\\d{5} \\w* \\w*")
str_extract(str, pattern = "\\d{5} \\w*, \\w*")
str_extract(str, pattern = "\\d{5} \\w*, \\w* ")
str_extract(str, pattern = "\\w*, \\w* ")
str_extract_all(str, pattern = "\\w*, \\w* ")
*
str_extract_all(str, pattern = "\\w*, \\w* ")
str_extract_all(str, pattern = "\\d{5} \\w*, \\w* ")
str_extract_all(str, pattern = "\\.")
str_extract_all(str, pattern = ".")
str_extract_all(str, pattern = "\\w. ")
every.character <- str_extract_all(str, pattern = "\\w. ")
View(every.character)
every.character <- data.frame(str_extract_all(str, pattern = "\\w. "))
View(every.character)
every.character <- data.frame(str_extract_all(str, pattern = "\\. "))
View(every.character)
every.character <- data.frame(str_extract_all(str, pattern = "."))
View(every.character)
str_extract_all(str, pattern = "\\d{5} .\\d")
str_extract_all(str, pattern = "\\d{5}.\\d")
str_extract_all(str, pattern = "\\d{5}.*\\d")
str_extract_all(str, pattern = "\\d{5}.+\\d")
str_extract_all(str, pattern = "\\d{5}+")
str_extract_all(str, pattern = "\\d{5}\\.")
str_extract_all(str, pattern = "\\d{5}*")
str_extract_all(str, pattern = "\\d{5}.")
str_extract_all(str, pattern = "\\d.")
str_extract_all(str, pattern = "\\d{5}\\w.")
str_extract_all(str, pattern = "\\d{5}\\w+")
str_extract_all(str, pattern = "\\d{5}.")
str_extract_all(str, pattern = "\\d{5}.\\d")
str_extract_all(str, pattern = "\\d{5}.*?\\d")
str_extract_all(str, pattern = "\\d.*?\\d")
{5}
str_extract_all(str, pattern = "\\d{5}.*?\\d")
str_extract_all(str, pattern = ".*?")
str_match_all(str, pattern = "\\d{5}*(.*?)\\d")
str_match_all(str, pattern = "\\d{5}(.*?)\\d")
str_match_all(str, pattern = "\\d{5}(.*?)\\d")
str_match_all(str, pattern = "\\d{5}(.*?)\\d")
str_detect(str, pattern = "##### \\.*? #####")
str_extract(str, pattern = "##### \\.*? #####")
str_extract(str, pattern = "##### \\.* #####")
str_extract(str, pattern = "##### \\. #####")
str_extract(str, pattern = "#\\.*?#")
str_match_all(str, pattern = "#(.*?)#")
str_match_all(str, pattern = "\#(.*?)#")
str_match_all(str, pattern = "\\#(.*?)#")
str_match_all(str, pattern = "\\#(.*?)#\\.")
str_match_all(str, pattern = "\\#(.*?)#")
str_match_all(str, pattern = "#(.*?)#")
str_remove_all(str, pattern = "#(.*?)#")
View(str_remove_all(str, pattern = "#(.*?)#"))
View(data.frame(str_remove_all(str, pattern = "#(.*?)#")))
View(data.frame(str_remove_all(str, pattern = "#(.*?)#")))
View(str_remove_all(str, pattern = "#(.*?)#"))
str_remove_all(str, pattern = "#(.*?)#")
str <- str_remove_all(str, pattern = "#(.*?)#")
str_extract_all(str, pattern = "\\d{5} ")
str_extract_all(str, pattern = "\\d{5}")
GeoFips <- str_extract_all(str, pattern = "\\d{5}") # GeoFips location (*unique*) ID
str_extract_all(str, pattern = "\\d{5}.*?\\d")
str_match_all(str, pattern = "\\d{5}(.*?)\\d")
str_match_all(str, pattern = "\\d{5}(.*?)\\.")
str_match_all(str, pattern = "\\d{5}(.*?)")
str_match_all(str, pattern = "\\d{5}(.*?)\\.*")
str_match_all(str, pattern = "\\d{5}(.*?)\\d")
str_match_all(str, pattern = "\\d{5}(.*?) ")
str_match_all(str, pattern = "\\d{5}.*? ")
str_match_all(str, pattern = "\\d{5}(.*?)\\d")
str_extract_all(str, pattern = "\\d{5}(.*?)\\ ")
str_extract_all(str, pattern = "(.*?)\\ ")
str_extract_all(str, pattern = "\\d{5}(.*?)\\.")
str_extract_all(str, pattern = "\\d{5}(.*?)\\.")
str_match_all(str, pattern = "\\d{5}(.*?)\\.")
str_match_all(str, pattern = "\\d{5}(.*?)\\d")
str_match_all(str, pattern = "\\\{} (.*?) \\d")
str_match_all(str, pattern = "\\d{5} (.*?) \\d")
str_match_all(str, pattern = "^#.*?\t"
str_match_all(str, pattern = "^#.*?\t")
str_match_all(str, pattern = "^#.*?\t")
str_match_all(str, pattern = "^#(.*?)\t")
str_match_all(str, pattern = "^#(.*?)#\t")
str_match_all(str, pattern = "^#(.*?) \t")
str_match_all(str, pattern = "#(.*?) \t")
str_match_all(str, pattern = "# (.*?) \t")
str_extract_all(str, pattern = "# (.*?) \t")
str_extract_all(str, pattern = "^#(.*?)#\t")
str_extract_all(str, pattern = "^#(.*?)#\\t")
str_extract_all(str, pattern = "^#(.*?)#\t")
str_extract_all(str, pattern = "^#(.*?)#\t")
sed(str, "#(.*?)#\t")
str_sub(str, "#(.*?)#\t")
str_sub(str, "#(.*?) \t")
str_sub(str, "#(.*?)# \t")
str_extract(str, "#(.*?)# \t")
str_extract(str, pattern = "#(.*?)#")
str_extract_all(str, pattern = "#(.*?)#")
# Import the files
txtfile <- 'https://raw.githubusercontent.com/palmorezm/msds/main/698/Data/NARHAI2011_2014.txt'
str <- read.delim(file = txtfile)
every.character <- data.frame(str_extract_all(str, pattern = ".")) # Visualize raw string for patterns
str_extract_all(str, pattern = "#(.*?)#")
str_extract_all(str, pattern = "^#(.*?)#\t")
str_match_all(str, pattern = "\\d{5} (.*?) \\d")
str_match_all(str, pattern = "#(.*?)#")
str_match_all(str, pattern = "^#(.*?)#")
str_match_all(str, pattern = "#####(.*?)#####")
str_match_all(str, pattern = "#####(.*?)#####\t")
str_match_all(str, pattern = "#####(.*?)#####")
str_match_all(str, pattern = "##### (.*?) #####")
str_remove_all(str, pattern = "##### (.*?) #####")
str_remove_all(str, pattern = "\n##### (.*?) #####")
str_remove_all(str, pattern = "\n##### (.*?) #####")
str_remove_all(str, pattern = "##### (.*?) #####")
str_remove_all(str, pattern = "##### (.*?) #####\\\")
\
\
\\
\\.\
\\.
str_remove_all(str, pattern = "##### (.*?) #####\\")
str_remove_all(str, pattern = "##### (.*?) #####\t")
str_remove_all(str, pattern = "##### (.*?) #####\\t")
str_remove_all(str, pattern = "\\##### (.*?) #####")
str_remove_all(str, pattern = "\\n##### (.*?) #####")
str_remove_all(str, pattern = "\n##### (.*?) #####")
str_remove_all(str, pattern = "\\\\\##### (.*?) #####")
str_remove_all(str, pattern = "\\\\##### (.*?) #####")
str_remove_all(str, pattern = "##### (.*?) #####")
str <- str_remove_all(str, pattern = "##### (.*?) #####")
str <- str_remove_all(str, pattern = "##### (.*?) #####")
str
str_extract_all(str, pattern = "\\d{5}")
GeoFips <- str_extract_all(str, pattern = "\\d{5}")
writeLines(str)
str_remove_all(str, "")
str_match_all()
str_match_all(str, "")
str_match_all(str, "()")
str_match_all(str, "")
str_extract_all(str, pattern = "\\d{5} \\w*, \\w* ")
str_match_all(str, pattern = "\\d{5}(.*?)\\d")
str_match_all(str, pattern = "\\d{5} (.*?) \\d")
str_match_all(str, pattern = "\\d{5} (.*?) \\.")
str_match_all(str, pattern = "\\d{5} (.*?) \\d")
str_extract_all(str, pattern = "\\d{5} (.*?) \\d")
str_extract_all(str, pattern = "\\d{5} (.*?) \\.")
str_extract_all(str, pattern = "\\d{5} (.*?) ")
str_extract_all(str, pattern = "\\d{5} (.*?)(.*?) ")
str_extract_all(str, pattern = "\\d{5} (.*?), \W")
str_extract_all(str, pattern = "\\d{5} (.*?) \W")
str_extract_all(str, pattern = "\\d{5} (.*?) \\w")
str_extract_all(str, pattern = "\\d{5} (.*?) \\w{2}")
str_extract_all(str, pattern = "\\d{5} (.*?) \\w{2} ")
str_extract_all(str, pattern = "(.*?) \\w{2} ")
str_match_all(str, pattern = "(.*?) \\w{2} ")
str_match_all(str, pattern = "(.*?) \\w{2} ")
str_extract_all(str, pattern = "\\d{5} (.*?) \\w{2} ")
str_extract_all(str, pattern = "\\d{5} (.*?) \\w{2} ")
str_extract_all(str, pattern = "\\d{5} (.*?) \\w{2}")
str_extract_all(str, pattern = "\\d{5} (.*?) \\W{2}")
str_extract_all(str, pattern = "\\d{5} (.*?) \\w*")
str_extract_all(str, pattern = "\\d{5} (.*?) \\w* ")
str_match_all(str, pattern = "(.*?) \\w{2} ")
str_match_all(str, pattern = "(.*?),")
str_match_all(str, pattern = "(.*?),\\w{2}")
str_match_all(str, pattern = "(.*?), \\w{2}")
str_extract_all(str, pattern = "//d{5} (.*?), \\w*")
str_extract_all(str, pattern = "//d{5} (.*?), \\w")
str_extract_all(str, pattern = "//d{5} (.*?)\\,")
str_extract_all(str, pattern = "//d{5} (.*?)\\.,")
str_extract_all(str, pattern = "//d{5} (.*?,)")
str_extract_all(str, pattern = "//d{5} (.*?),")
str_extract_all(str, pattern = "\\d{5} (.*?),")
str_extract_all(str, pattern = "\\d{5} (.*?), \\w")
str_extract_all(str, pattern = "\\d{5} (.*?), \\w{2}")
metro_name <- str_extract_all(str, pattern = "\\d{5} (.*?), \\w{2}")
str_extract_all(str, pattern = "(.*?), \\w{2}"
str_extract_all(str, pattern = "(.*?), \\w{2}")
str_extract_all(str, pattern = "(.*?), \\w{2}")
str_extract_all(str, pattern = "\\d{5} ")
str_remove_all(str, pattern = "\\d{5} ")
str_remove_all(metro_name, pattern = "\\d{5} ")
metro_name <- str_remove_all(metro_name, pattern = "\\d{5} ") # geofips not needed in the name
str_extract_all(metro_name, "\\w{2}")
str_extract_all(metro_name, "$\\w{2}")
str_extract_all(metro_name, "\\w{2}$")
str_extract_all(metro_name, "\\$\\w{2}")
str_extract_all(metro_name, "$w{2}")
str_match_all(metro_name, "$w{2}")
str_match_all(metro_name, "$\\w{2}")
str_match_all(metro_name, "\\w{2}$")
str_match_all(metro_name, "\\w{2}$")
str_match_all(metro_name, "\\(w{2})$")
str_match_all(metro_name, "(\\w{2})$")
View(metro_name)
str_match_all(metro_name, "\\w$")
str_match_all(metro_name, "\\w*$")
str_match_all(metro_name, ",$")
str_extract_all(metro_name, ",$")
str_extract_all(metro_name, "\\w$")
str_extract_all(metro_name, "\\w{*}$")
str_extract_all(metro_name, "\\w*$")
data.frame(metro_name)
str_match_all(str, " \\d* ")
str_match_all(str, " \\d ")
str_match_all(str, " \\d{3} ")
str_match_all(str, " \\d. ")
str_match_all(str, " \\d ")
str_extract_all(str, " \\d ")
str_extract_all(str, " \\d")
str_extract_all(str, " \\d* ")
str_extract_all(str, " \\d{1-3}\\.\\d ")
str_extract_all(str, " \\d{1,3}\\.\\d ")
writeLines(str)
writeLines(metro_name)
View(writeLines(metro_name))
View(data.frame(writeLines(metro_name)))
# Import the files
txtfile <- 'https://raw.githubusercontent.com/palmorezm/msds/main/698/Data/NARHAI2011_2014.txt'
str <- read.delim(file = txtfile)
every.character <- data.frame(str_extract_all(str, pattern = ".")) # Visualize raw string for patterns
# Get stringy
str <- str_remove_all(str, pattern = "##### (.*?) #####") # Remove junk inbetweens
GeoFips <- str_extract_all(str, pattern = "\\d{5}") # GeoFips location (*unique*) ID
str_extract_all(str, pattern = "\\d{5} \\w*, \\w* ")
str_extract_all(str, " \\d{1,3}\\.\\d ")
str_extract(str, " \\d{1,3}\\.\\d ")
str_match_all(str, "\\w{2} (.*?)")
str_match_all(str, "\\w (.*?)")
str_match_all(str, "\\w (.*?)\\d")
str_match_all(str, "\\w (.*?)\\d*")
str_match_all(str, "\\d (.*?)")
str_match_all(str, "(.*?)")
str_match_all(str, "\\d{1,4}")
str_match_all(str, "\\d{1,4}\\.\\d{1}")
str_match_all(str, "\\d{1,4}\\.\\d{1}")
nums <- str_match_all(str, "\\d{1,4}\\.\\d{1}")
str_extract(nums, "\\d{1,3}")
str_extract(nums, "\\d{1,4}")
str_extract(nums, "\\d{1,4}\\.\\d")
str_extract_all(nums, "\\d{1,4}\\.\\d")
str_extract_all(nums, "^\\d{1,4}\\.\\d")
str_extract_all(nums, "^ \\d{1,4}\\.\\d")
str_extract_all(nums, "^\\d{1,4}\\.\\d")
str_extract(nums, "^\\d"
str_extract(nums, "^\\d")
str_extract(nums, "^\\d{1,3}")
str_extract(nums, "^\\d?")
str_extract(nums, "^?")
str_extract(nums, "^")
str_extract(nums, "\\^")
str_extract(nums, "\\^.")
str_extract(nums, "^.")
writeLines(str)
writeLines(nums)
writeLines(str)
str2 <- writeLines(str)
str_extract_all(str, "\\d{1,3}\\.\\d{1}")
num <- str_extract_all(str, "\\d{1,3}\\.\\d{1}")
str_match(num, "^\\d")
str_match(num, "\\d")
str_match(num, "\\d{3}")
str_match(num, "\\d{1,3}")
str_match(num, "\\d{1,3}\\.\\d{1}")
str_match(num, "\\d{1,3}\\.\\d{1}")
str_match_all(num, "\\d{1,3}\\.\\d{1}")
str_extract_all(num, "\\d{1,3}\\.\\d{1}")
str_match_all(num, "\\d{1,3}\\.\\d{1}")
str_match_all(num, "\\d{1,3}\\.\\d{1}")
str_match_all(num, "^\\d{1,3}\\.\\d{1}")
str_match_all(num, "^\\d{1,3}\\.\\d{1}")[,1]
str_match_all(num, "^\\d{1,3}\\.\\d{1}")[,2]
str_match_all(num, "^\\d{1,3}\\.\\d{1}")
str_match_all(num, "^\\d{1,3}\\.\\d{1}")
str_match_all(num, "\\d{1,3}\\.\\d{1}")
# MS Analytics Capstone
# Restring GEOID to GEOFIPS
# Dataset: Median Home Values
# Sources: U.S.Census (ACS)
# data.census.gov
# Packages
library(dplyr)
library(tidyr)
library(stringr)
#### Start with Median Home Values ####
mhv <- data.frame(read.csv("https://raw.githubusercontent.com/palmorezm/msds/main/698/Data/mhv.csv"))
# Compare GEOID and GeoName
# GEOID Filter:
mhv %>%
filter(GEOID == "310M100US10180")
#     X       GEOID           GeoName          MedianValue  MOE Year
# 1    4 310M100US10180 Abilene, TX Metro Area       83400 2009 2010
# 2  959 310M100US10180 Abilene, TX Metro Area       84800 1914 2011
# 3 1914 310M100US10180 Abilene, TX Metro Area       89300 2515 2012
# GeoName Filter:
mhv %>%
filter(GeoName == "Abilene, TX Metro Area")
#      X    GEOID                GeoName        MedianValue  MOE Year
# 1     4 310M100US10180 Abilene, TX Metro Area       83400 2009 2010
# 2   959 310M100US10180 Abilene, TX Metro Area       84800 1914 2011
# 3  1914 310M100US10180 Abilene, TX Metro Area       89300 2515 2012
# 4  2868 310M200US10180 Abilene, TX Metro Area       89000 2139 2013
# 5  3797 310M200US10180 Abilene, TX Metro Area       91900 2825 2014
# 6  4726 310M200US10180 Abilene, TX Metro Area       94000 2341 2015
# 7  5655 310M300US10180 Abilene, TX Metro Area       98200 1916 2016
# 8  6600 310M300US10180 Abilene, TX Metro Area      102000 2634 2017
# 9  7545 310M400US10180 Abilene, TX Metro Area      110100 3327 2018
# 10 8490 310M500US10180 Abilene, TX Metro Area      116100 2841 2019
# Results
# GEOID filter returns 3 total entries, all with exactly the same GEOID.
# GeoName returns 10 total entries, all with exactly the same GeoName
# Difference is GEOID reference changes middle value but not last 5 digits
# Last 5 digits of GEOID are equivalent to GEOFIPS
# Slice to extract the GEOFIPS from GEOID for Abilene, TX metro
geostring <- as.character(mhv$GEOID)
GeoFips <- str_extract(geostring, "\\d{5}$")
mhv$GeoFips <- GeoFips
# Check that there are matches to GeoFips
################### Rerun Minc Data Extraction Tidying ######
# Income, Population, & Per Capita Income by MSA from 2008 to 2019
# Extraction
cainc1 <- data.frame(read.csv(
"https://raw.githubusercontent.com/palmorezm/msds/main/698/Data/cainc1_msa_11yr.csv"))
cainc1 <- cainc1[4:nrow(cainc1),]
colnames(cainc1) <- cainc1[1,]
cainc1 <- cainc1[-1,]
# Tidying
minc <- cainc1 %>%
gather(year, value, -GeoFips,
-GeoName, -LineCode, -Description)
minc.personalincome <- subset(minc, LineCode==1)
minc.population <- subset(minc, LineCode==2)
minc.percapitaincome<- subset(minc, LineCode==3)
minc <- rbind(minc.personalincome, minc.population, minc.percapitaincome)
################## End Minc Rerun ############################
# Prepare for test Merge
df1 <- minc %>%
filter(year == 2019 & LineCode == 3) %>%
dplyr::select("GeoFips", "GeoName", "year", "value") %>%
slice(-1)
df2 <- mhv %>%
rename(value = MedianValue,
year = Year) %>%
dplyr::select("GeoFips", "GeoName", "year", "value") %>%
filter(year == 2019)
# Test merge for 2019
merged.df.2019 <- merge(df1, df2, by = "GeoFips")
# Complete and functioning - for 2019
# 2018
df1 <- minc %>%
filter(year == 2018 & LineCode == 3) %>%
dplyr::select("GeoFips", "GeoName", "year", "value") %>%
slice(-1)
df2 <- mhv %>%
rename(value = MedianValue,
year = Year) %>%
dplyr::select("GeoFips", "GeoName", "year", "value") %>%
filter(year == 2018)
merged.df.2018 <- merge(df1, df2, by = "GeoFips")
# 2017
df1 <- minc %>%
filter(year == 2017 & LineCode == 3) %>%
dplyr::select("GeoFips", "GeoName", "year", "value") %>%
slice(-1)
df2 <- mhv %>%
rename(value = MedianValue,
year = Year) %>%
dplyr::select("GeoFips", "GeoName", "year", "value") %>%
filter(year == 2017)
merged.df.2017 <- merge(df1, df2, by = "GeoFips")
# 2016
df1 <- minc %>%
filter(year == 2016 & LineCode == 3) %>%
dplyr::select("GeoFips", "GeoName", "year", "value") %>%
slice(-1)
df2 <- mhv %>%
rename(value = MedianValue,
year = Year) %>%
dplyr::select("GeoFips", "GeoName", "year", "value") %>%
filter(year == 2016)
merged.df.2016 <- merge(df1, df2, by = "GeoFips")
# 2015
df1 <- minc %>%
filter(year == 2015 & LineCode == 3) %>%
dplyr::select("GeoFips", "GeoName", "year", "value") %>%
slice(-1)
df2 <- mhv %>%
rename(value = MedianValue,
year = Year) %>%
dplyr::select("GeoFips", "GeoName", "year", "value") %>%
filter(year == 2015)
merged.df.2015 <- merge(df1, df2, by = "GeoFips")
# 2014
df1 <- minc %>%
filter(year == 2014 & LineCode == 3) %>%
dplyr::select("GeoFips", "GeoName", "year", "value") %>%
slice(-1)
df2 <- mhv %>%
rename(value = MedianValue,
year = Year) %>%
dplyr::select("GeoFips", "GeoName", "year", "value") %>%
filter(year == 2014)
merged.df.2014 <- merge(df1, df2, by = "GeoFips")
# 2013
df1 <- minc %>%
filter(year == 2013 & LineCode == 3) %>%
dplyr::select("GeoFips", "GeoName", "year", "value") %>%
slice(-1)
df2 <- mhv %>%
rename(value = MedianValue,
year = Year) %>%
dplyr::select("GeoFips", "GeoName", "year", "value") %>%
filter(year == 2013)
merged.df.2013 <- merge(df1, df2, by = "GeoFips")
# 2012
df1 <- minc %>%
filter(year == 2012 & LineCode == 3) %>%
dplyr::select("GeoFips", "GeoName", "year", "value") %>%
slice(-1)
df2 <- mhv %>%
rename(value = MedianValue,
year = Year) %>%
dplyr::select("GeoFips", "GeoName", "year", "value") %>%
filter(year == 2012)
merged.df.2012 <- merge(df1, df2, by = "GeoFips")
# 2011
df1 <- minc %>%
filter(year == 2011 & LineCode == 3) %>%
dplyr::select("GeoFips", "GeoName", "year", "value") %>%
slice(-1)
df2 <- mhv %>%
rename(value = MedianValue,
year = Year) %>%
dplyr::select("GeoFips", "GeoName", "year", "value") %>%
filter(year == 2011)
merged.df.2011 <- merge(df1, df2, by = "GeoFips")
# 2010
df1 <- minc %>%
filter(year == 2010 & LineCode == 3) %>%
dplyr::select("GeoFips", "GeoName", "year", "value") %>%
slice(-1)
df2 <- mhv %>%
rename(value = MedianValue,
year = Year) %>%
dplyr::select("GeoFips", "GeoName", "year", "value") %>%
filter(year == 2010)
merged.df.2010 <- merge(df1, df2, by = "GeoFips")
# Review Merges
merged.df <- rbind(merged.df.2019, merged.df.2018,
merged.df.2017, merged.df.2016,
merged.df.2015, merged.df.2014,
merged.df.2013, merged.df.2012,
merged.df.2011, merged.df.2010)
# Rename and drop columns
merged.df <- merged.df %>%
dplyr::select(-GeoName.y, -year.y)
colnames(merged.df) <- c("GeoFips",
"GeoName", "year", "MEDINC", "MEDVAL")
View(merged.df)
# All metros 2010 through 2019
df_mapping <- merged.df %>%
mutate(IR = 0.035,
PMT = MEDVAL * 0.8 * (IR / 12)/(1 - (1/(1 + IR/12)^360)),
QINC = PMT * 4 * 12,
HAI = (MEDINC / QINC) * 100) %>%
filter(HAI >= 0 & HAI <= 500) %>%
arrange(desc(HAI))
library(tidyr)
library(dplyr)
merged.df %>%
mutate(IR = 0.035,
PMT = MEDVAL * 0.8 * (IR / 12)/(1 - (1/(1 + IR/12)^360)),
QINC = PMT * 4 * 12,
HAI = (MEDINC / QINC) * 100,
HHAI = ( (MEDINC - 5000) / QINC) * 100,
DIF = HAI - HHAI,
AVGHAI = median(HAI) ) %>%
arrange(desc(AVGHAI)) %>% View()
merged.df %>%
mutate(IR = 0.035,
PMT = MEDVAL * 0.8 * (IR / 12)/(1 - (1/(1 + IR/12)^360)),
QINC = PMT * 4 * 12,
HAI = (MEDINC / QINC) * 100,
HHAI = ( (MEDINC - 5000) / QINC) * 100,
DIF = HAI - HHAI,
AVGHAI =  median((MEDINC / QINC) * 100 )
) %>%
arrange(desc(AVGHAI)) %>% View()
merged.df %>%
filter(GeoName == "Harrisburg-Carlisle, PA (Metropolitan Statistical Area)") %>%
mutate(IR = 0.035,
PMT = MEDVAL * 0.8 * (IR / 12)/(1 - (1/(1 + IR/12)^360)),
QINC = PMT * 4 * 12,
HAI = (MEDINC / QINC) * 100,
HHAI = ( (MEDINC - 5000) / QINC) * 100,
DIF = HAI - HHAI,
AVGHAI =  median((MEDINC / QINC) * 100 )
) %>%
arrange(desc(AVGHAI)) %>% View()
View(df_mapping)
