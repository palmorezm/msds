knitr::opts_chunk$set(echo = TRUE, warning = F, message = F)
cpi <- read_delim(
"https://raw.githubusercontent.com/palmorezm/msds/main/621/Final/cpi1_1913_present.txt", ",")
library(readr)
cpi <- read_delim(
"https://raw.githubusercontent.com/palmorezm/msds/main/621/Final/cpi1_1913_present.txt", ",")
knitr::opts_chunk$set(echo = TRUE, warning = F, message = F)
xy <- table(df$X > x, df$Y>y)
knitr::opts_chunk$set(echo = TRUE, warning = F, message = F)
library(tidyverse)
library(kableExtra)
set.seed(41)
N <- 41 # Random number greater than or equal to 6
n <- 10000 # Quantity of random normal numbers to generate
sigma <- (N + 1)/2 # Sigma
mu <- sigma # Mu = Sigma
# Generate random number
df <- data.frame(X = runif(n, min = 1, max = N),
Y = rnorm(n, mean = mu, sd = sigma))
# Display random numbers
head(df, 10)
hist(df$Y)
x = median(df$X) # median of X
y = quantile(df$Y, 0.25) # 1st quartile of Y
# A. P(X>x | X>y)
PXxXy <- df %>%
filter(X>x, X>y) %>%
nrow() / n
PXy <- df %>%
filter(X>y) %>%
nrow() / n
A <- signif((PXxXy / PXy), 3)
# B. P(X>x, Y>y)
PXxXy <- df %>%
filter(X>x, Y>y) %>%
nrow() / n
B <- signif(PXxXy, 3)
# C. P(X<x | X>y)
PXxXy <- df %>%
filter(X < x,
X > y) %>%
nrow() / n
PXy <- df %>%
filter(X > y) %>%
nrow() / n
C <- PXxXy/PXy
print(paste("A.:",A,"B.:",B,"C.:",C))
# Joint P
JAB <- df %>%
mutate(A = ifelse(X > x, "X > x", "X < x")) %>%
mutate(B = ifelse(Y > y, " Y > y", " Y < y")) %>%
group_by(A, B) %>%
summarise(total = n()) %>%
mutate(P = total / n)
# Marginal P
MA <- JAB %>%
ungroup() %>%
group_by(A) %>%
summarise(sum = sum(total), P = sum(P))
MB <- JAB %>%
ungroup() %>%
group_by(B) %>%
summarise(sum = sum(total), P = sum(P))
# build a table
tbl <- bind_rows(JAB, MA, MB) %>%
select(-total) %>%
spread(A, P)
colnames(tbl) <- c("Condition", "sum", "X<x", "X>x", "Total")
kable(tbl)
xy <- table(df$X > x, df$Y>y)
fisher.test(xy,simulate.p.value=TRUE)
chisq.test(xy, correct=TRUE)
xy <- table(df$X>x, df$Y>y)
fisher.test(xy,simulate.p.value=TRUE)
chisq.test(xy, correct=TRUE)
fisher.test(xy,simulate.p.value=TRUE)
fisher.test(xy)
chisq.test(xy, correct=T)
knitr::opts_chunk$set(echo = TRUE, warning = F, message = F)
library(tidyverse)
library(kableExtra)
set.seed(41)
N <- 7 # Random number greater than or equal to 6
n <- 10000 # Quantity of random normal numbers to generate
sigma <- (N + 1)/2 # Sigma
mu <- sigma # Mu = Sigma
# Generate random number
df <- data.frame(X = runif(n, min = 1, max = N),
Y = rnorm(n, mean = mu, sd = sigma))
# Display random numbers
head(df, 10)
hist(df$Y)
x = median(df$X) # median of X
y = quantile(df$Y, 0.25) # 1st quartile of Y
# A. P(X>x | X>y)
PXxXy <- df %>%
filter(X>x, X>y) %>%
nrow() / n
PXy <- df %>%
filter(X>y) %>%
nrow() / n
A <- signif((PXxXy / PXy), 3)
# B. P(X>x, Y>y)
PXxXy <- df %>%
filter(X>x, Y>y) %>%
nrow() / n
B <- signif(PXxXy, 3)
# C. P(X<x | X>y)
PXxXy <- df %>%
filter(X < x,
X > y) %>%
nrow() / n
PXy <- df %>%
filter(X > y) %>%
nrow() / n
C <- PXxXy/PXy
print(paste("A.:",A,"B.:",B,"C.:",C))
# Joint P
JAB <- df %>%
mutate(A = ifelse(X > x, "X > x", "X < x")) %>%
mutate(B = ifelse(Y > y, " Y > y", " Y < y")) %>%
group_by(A, B) %>%
summarise(total = n()) %>%
mutate(P = total / n)
# Marginal P
MA <- JAB %>%
ungroup() %>%
group_by(A) %>%
summarise(sum = sum(total), P = sum(P))
MB <- JAB %>%
ungroup() %>%
group_by(B) %>%
summarise(sum = sum(total), P = sum(P))
# build a table
tbl <- bind_rows(JAB, MA, MB) %>%
select(-total) %>%
spread(A, P)
colnames(tbl) <- c("Condition", "sum", "X<x", "X>x", "Total")
kable(tbl)
knitr::opts_chunk$set(echo = TRUE, warning = F, message = F)
library(tidyverse)
library(kableExtra)
set.seed(41)
N <- 7 # Random number greater than or equal to 6
n <- 10000 # Quantity of random normal numbers to generate
sigma <- (N + 1)/2 # Sigma
mu <- sigma # Mu = Sigma
# Generate random number
df <- data.frame(X = runif(n, min = 1, max = N),
Y = rnorm(n, mean = mu, sd = sigma))
# Display random numbers
head(df, 10)
hist(df$Y)
x = median(df$X) # median of X
y = quantile(df$Y, 0.25) # 1st quartile of Y
# A. P(X>x | X>y)
PXxXy <- df %>%
filter(X>x, X>y) %>%
nrow() / n
PXy <- df %>%
filter(X>y) %>%
nrow() / n
A <- signif((PXxXy / PXy), 3)
# B. P(X>x, Y>y)
PXxXy <- df %>%
filter(X>x, Y>y) %>%
nrow() / n
B <- signif(PXxXy, 3)
# C. P(X<x | X>y)
PXxXy <- df %>%
filter(X < x,
X > y) %>%
nrow() / n
PXy <- df %>%
filter(X > y) %>%
nrow() / n
C <- PXxXy/PXy
print(paste("A.:",A,"B.:",B,"C.:",C))
# Joint P
JAB <- df %>%
mutate(A = ifelse(X > x, "X > x", "X < x")) %>%
mutate(B = ifelse(Y > y, " Y > y", " Y < y")) %>%
group_by(A, B) %>%
summarise(total = n()) %>%
mutate(P = total / n)
# Marginal P
MA <- JAB %>%
ungroup() %>%
group_by(A) %>%
summarise(sum = sum(total), P = sum(P))
MB <- JAB %>%
ungroup() %>%
group_by(B) %>%
summarise(sum = sum(total), P = sum(P))
# build a table
tbl <- bind_rows(JAB, MA, MB) %>%
select(-total) %>%
spread(A, P)
colnames(tbl) <- c("Condition", "sum", "X<x", "X>x", "Total")
kable(tbl)
xy <- table(df$X>x, df$Y>y)
fisher.test(xy,simulate.p.value=T)
chisq.test(xy, correct=T)
xy <- table(df$X>x, df$Y>y)
chisq.test(xy, correct=T)
fisher.test(xy,simulate.p.value=T)
set.seed(123)
N <- 10 # Random number greater than or equal to 6
n <- 10000 # Quantity of random normal numbers to generate
sigma <- (N + 1)/2 # Sigma
mu <- sigma # Mu = Sigma
# Generate random number
df <- data.frame(X = runif(n, min = 1, max = N),
Y = rnorm(n, mean = mu, sd = sigma))
# Display random numbers
head(df, 10)
hist(df$Y)
x = median(df$X) # median of X
y = quantile(df$Y, 0.25) # 1st quartile of Y
# A. P(X>x | X>y)
PXxXy <- df %>%
filter(X>x, X>y) %>%
nrow() / n
PXy <- df %>%
filter(X>y) %>%
nrow() / n
A <- signif((PXxXy / PXy), 3)
# B. P(X>x, Y>y)
PXxXy <- df %>%
filter(X>x, Y>y) %>%
nrow() / n
B <- signif(PXxXy, 3)
# C. P(X<x | X>y)
PXxXy <- df %>%
filter(X < x,
X > y) %>%
nrow() / n
PXy <- df %>%
filter(X > y) %>%
nrow() / n
C <- PXxXy/PXy
print(paste("A.:",A,"B.:",B,"C.:",C))
# Joint P
JAB <- df %>%
mutate(A = ifelse(X > x, "X > x", "X < x")) %>%
mutate(B = ifelse(Y > y, " Y > y", " Y < y")) %>%
group_by(A, B) %>%
summarise(total = n()) %>%
mutate(P = total / n)
# Marginal P
MA <- JAB %>%
ungroup() %>%
group_by(A) %>%
summarise(sum = sum(total), P = sum(P))
MB <- JAB %>%
ungroup() %>%
group_by(B) %>%
summarise(sum = sum(total), P = sum(P))
# build a table
tbl <- bind_rows(JAB, MA, MB) %>%
select(-total) %>%
spread(A, P)
colnames(tbl) <- c("Condition", "sum", "X<x", "X>x", "Total")
kable(tbl)
train <- read.csv("https://raw.githubusercontent.com/palmorezm/msds/main/605/train.csv")
test <- read.csv("https://raw.githubusercontent.com/palmorezm/msds/main/605/test.csv")
View(test)
train <- read.csv("https://raw.githubusercontent.com/palmorezm/msds/main/605/train.csv")
test <- read.csv("https://raw.githubusercontent.com/palmorezm/msds/main/605/test.csv")
# Packages
library(psych)
# Packages
library(tidyverse)
describe(train)
train %>%
ggplot() +
geom_point(aes(OverallCond, SalePrice))
train %>%
ggplot() +
geom_point(aes(LotArea, SalePrice))
train %>%
ggplot() +
geom_point(aes(OverallCond, SalePrice))
train %>%
ggplot() +
geom_point(aes(OverallQual, SalePrice))
train %>%
ggplot() +
geom_point(aes(OverallCond, SalePrice))
train %>%
ggplot() +
geom_point(aes(LotArea, SalePrice))
