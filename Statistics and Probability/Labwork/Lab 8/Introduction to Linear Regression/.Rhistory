m2 <- lm(hf_score ~ pf_expression_control, data = hfi)
library(tidyverse)
library(openintro)
library(statsr)
data(hfi)
glimpse(hfi)
ggplot(hfi, aes(x = pf_expression_control, y = pf_score)) + geom_point(shape=1) + geom_smooth(method = "lm")
hfi %>%
summarise(cor(pf_expression_control, pf_score, use = "complete.obs"))
cor.test(hfi$pf_expression_control, hfi$pf_score)
pf_expression_control <- (hfi$pf_expression_control)
pf_score <-(hfi$pf_score)
pf_data <- cbind(pf_expression_control, pf_score)
pf_data <- as.data.frame(pf_data)
pf_data <- na.omit(pf_data)
# First Run
plot_ss(x = pf_expression_control, y = pf_score, data = pf_data, showSquares = TRUE)
# Second Run
plot_ss(x = pf_expression_control, y = pf_score, data = pf_data, showSquares = TRUE)
# Third Run
plot_ss(x = pf_expression_control, y = pf_score, data = pf_data, showSquares = TRUE)
# Third Run
plot_ss(x = pf_expression_control, y = pf_score, data = pf_data, showSquares = TRUE)
m2 <- lm(hf_score ~ pf_expression_control, data = hfi)
summary(m2)
hfi %>%
summarise(cor(pf_expression_control, hf_score, use = "complete.obs"))
ggplot(hfi, aes(x = pf_expression_control, y = hf_score)) + geom_point(shape=1) + geom_smooth(method = "lm")
ggplot(data = hfi, aes(x = pf_expression_control, y = pf_score)) +
stat_smooth(method = "lm", se = FALSE) + geom_vline(xintercept = 6.7, linetype="solid",
color = "red", size=0.5)
m3 <- lm(pf_score ~ pf_expression_control, data = hfi)
summary(m3)
ggplot(data = hfi, aes(x = pf_expression_control, y = pf_score)) +
stat_smooth(method = "lm", se = FALSE) + geom_vline(xintercept = 6.7, linetype="solid",
color = "red", size=0.5)
plot_ss(x = pf_expression_control, y = pf_score, data = pf_data, showSquares = TRUE)
x<-6.7
int<-4.6171
slp<-0.4914
int+slp*(x)
y<-7.85
x<-6.7
int<-4.6171
slp<-0.4914
y_hat <-int+slp*(x)
y-y_hat
y<-7.8
x<-6.7
int<-4.6171
slp<-0.4914
y_hat <-int+slp*(x)
y-y_hat
ggplot(hfi, aes(x = pf_movement, y = pf_score)) + geom_point(shape=1) + geom_smooth(method = "lm")
hfi %>%
summarise(cor(pf_movement, pf_score, use = "complete.obs"))
cor.test(hfi$pf_expression_control, hfi$pf_score)
ggplot(hfi, aes(x = pf_movement, y = pf_score)) + geom_point(shape=1) + geom_smooth(method = "lm")
hfi %>%
summarise(cor(pf_movement, pf_score, use = "complete.obs"))
cor.test(hfi$pf_movement, hfi$pf_score)
ggplot(hfi, aes(x = pf_association_political_establish, y = pf_score)) + geom_point(shape=1) + geom_smooth(method = "lm")
hfi %>%
summarise(cor(pf_association_political_establish, pf_score, use = "complete.obs"))
cor.test(hfi$pf_association_political_establish, hfi$pf_score)
ggplot(hfi, aes(x = pf_movement_women, y = pf_score)) + geom_point(shape=1) + geom_smooth(method = "lm")
hfi %>%
summarise(cor(pf_movement_women, pf_score, use = "complete.obs"))
cor.test(hfi$pf_movement_women, hfi$pf_score)
ggplot(hfi, aes(x = pf_movement, y = pf_score)) + geom_point(shape=1) + geom_smooth(method = "lm")
hfi %>%
summarise(cor(pf_movement, pf_score, use = "complete.obs"))
cor.test(hfi$pf_movement, hfi$pf_score)
function (mapping = NULL, data = NULL, stat = "smooth", position = "identity",
..., method = NULL, formula = NULL, se = TRUE, na.rm = FALSE,
orientation = NA, show.legend = NA, inherit.aes = TRUE)
ggplot(hfi, aes(x = pf_expression_internet, y = pf_score)) + geom_point(shape=1) + geom_smooth(method = "lm")
ggplot(hfi, aes(x = pf_expression_internet, y = pf_score)) + geom_point(shape=1) + geom_smooth(method = "lm")
hfi %>%
summarise(cor(pf_movement, pf_score, use = "complete.obs"))
cor.test(hfi$pf_movement, hfi$pf_score)
ggplot(hfi, aes(x = pf_rol, y = pf_score)) + geom_point(shape=1) + geom_smooth(method = "lm")
hfi %>%
summarise(cor(pf_rol, pf_score, use = "complete.obs"))
cor.test(hfi$pf_rol, hfi$pf_score)
ggplot(hfi, aes(x = pf_relgion, y = pf_score)) + geom_point(shape=1) + geom_smooth(method = "lm")
ggplot(hfi, aes(x = pf_religion_restrictions, y = pf_score)) + geom_point(shape=1) + geom_smooth(method = "lm")
ggplot(hfi, aes(x = pf_religion_restrictions, y = pf_score)) + geom_point(shape=1) + geom_smooth(method = "lm")
hfi %>%
summarise(cor(pf_religion_restrictions, pf_score, use = "complete.obs"))
cor.test(hfi$pf_religion_restrictions, hfi$pf_score)
summary(eruption.lm)$r.squared
pfsrr_lm <- lm(pf_religion_restrictions ~ pf_score, data = hfi)
View(pfsrr_lm)
summary(pfsrr_lm)$r.squared
# Rsquared of pf expression control and pf score
pfsec_lm <- lm(pf_expression_control ~ pf_score, data = hfi)
summary(pfsec_lm)$r.squared
?hfi
ggplot(hfi, aes(x = pf_ss_women, y = pf_score)) + geom_point(shape=1) + geom_smooth(method = "lm")
ggplot(hfi, aes(x = pf_expression_internet, y = pf_score)) + geom_point(shape=1) + geom_smooth(method = "lm")
ggplot(hfi, aes(x = pf_rol, y = pf_score)) + geom_point(shape=1) + geom_smooth(method = "lm")
ggplot(hfi, aes(x = pf_rol, y = pf_score)) + geom_point(shape=1) + geom_smooth(method = "lm")
hfi %>%
summarise(cor(pf_rol, pf_score, use = "complete.obs"))
cor.test(hfi$pf_rol, hfi$pf_score)
ggplot(data = m1, aes(x = .fitted, y = .resid)) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed") +
xlab("Fitted values") +
ylab("Residuals")
ggplot(data = m2, aes(x = .fitted, y = .resid)) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed") +
xlab("Fitted values") +
ylab("Residuals")
# Collect
m4 <- lm(pf_rol ~ pf_score, data = hfi)
summary(m4)
hfi %>%
summarise(cor(pf_rol, pf_score, use = "complete.obs"))
ggplot(hfi, aes(x = pf_rol, y = pf_score)) + geom_point(shape=1) + geom_smooth(method = "lm")
# Visualize
ggplot(data = m4, aes(x = .fitted, y = .resid)) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed") +
xlab("Fitted values") +
ylab("Residuals")
pfsrl_lm <- lm(pf_rol ~ pf_score, data = hfi)
summary(pfsrl_lm)$r.squared
ggplot(data = m2, aes(sample = .resid)) +
stat_qq()
ggplot(data = m2, aes(x = .resid)) +
geom_histogram(binwidth = .25) +
xlab("Residuals")
ggplot(data = m1, aes(x = .fitted, y = .resid)) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed") +
xlab("Fitted values") +
ylab("Residuals")
knitr::opts_chunk$set(echo = TRUE)
library(openintro)
# load data ---------------------------------------------------------
starbucks <- read.csv("https://github.com/jbryer/DATA606Fall2019/raw/master/course_data/starbucks.csv")
# model calories vs. carbos -----------------------------------------
m_carb_cals <- lm(carb ~ calories, data = starbucks)
# plot calories vs. carbos ------------------------------------------
par(mar = c(3.5, 4, 1, 0.5), las = 1, mgp = c(2.5, 0.7, 0),
cex.lab = 1.5, cex.axis = 1.5)
plot(carb ~ calories, data = starbucks,
pch = 19, col = COL[1,2],
xlab = "Calories", ylab = "Carbs (grams)", axes = FALSE)
axis(1)
axis(2, at = seq(20, 80, 20))
box()
abline(m_carb_cals, col = COL[2], lwd = 2)
# plot residuals ----------------------------------------------------
par(mar = c(3.5, 4, 1, 0.5), las = 1, mgp = c(2.5, 0.7, 0),
cex.lab = 1.5, cex.axis = 1.5)
plot(m_carb_cals$residuals ~ starbucks$calories,
xlab = "Calories", ylab = "Residuals",
col = COL[1,2], pch = 19,
ylim = c(-30, 30), axes = FALSE)
axis(1)
axis(2, at = seq(-20, 20, 20))
box()
abline(h = 0, lty = 2)
# histogram of residuals --------------------------------------------
par(mar = c(3.5, 2.5, 0.5, 0.5), las = 1, mgp = c(2.5, 0.7, 0),
cex.lab = 1.5, cex.axis = 1.5)
hist(m_carb_cals$residuals,
col = COL[1],
xlab = "Residuals", ylab = "", main = "",
axes = FALSE, xlim = c(-40,40))
axis(1, at = seq(-40, 40, 20))
axis(2)
ggplot(data = m1, aes(x = .fitted, y = .resid)) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed") +
xlab("Fitted values") +
ylab("Residuals")
library(tidyverse)
library(openintro)
library(statsr)
data(hfi)
glimpse(hfi)
ggplot(hfi, aes(x = pf_expression_control, y = pf_score)) + geom_point(shape=1) + geom_smooth(method = "lm")
hfi %>%
summarise(cor(pf_expression_control, pf_score, use = "complete.obs"))
cor.test(hfi$pf_expression_control, hfi$pf_score)
m1 <- lm(pf_score ~ pf_expression_control, data = hfi)
pf_expression_control <- (hfi$pf_expression_control)
pf_score <-(hfi$pf_score)
pf_data <- cbind(pf_expression_control, pf_score)
pf_data <- as.data.frame(pf_data)
pf_data <- na.omit(pf_data)
# First Run
plot_ss(x = pf_expression_control, y = pf_score, data = pf_data, showSquares = TRUE)
# Second Run
plot_ss(x = pf_expression_control, y = pf_score, data = pf_data, showSquares = TRUE)
# Third Run
plot_ss(x = pf_expression_control, y = pf_score, data = pf_data, showSquares = TRUE)
m2 <- lm(hf_score ~ pf_expression_control, data = hfi)
summary(m2)
hfi %>%
summarise(cor(pf_expression_control, hf_score, use = "complete.obs"))
ggplot(hfi, aes(x = pf_expression_control, y = hf_score)) + geom_point(shape=1) + geom_smooth(method = "lm")
ggplot(data = hfi, aes(x = pf_expression_control, y = pf_score)) +
stat_smooth(method = "lm", se = FALSE) + geom_vline(xintercept = 6.7, linetype="solid",
color = "red", size=0.5)
plot_ss(x = pf_expression_control, y = pf_score, data = pf_data, showSquares = TRUE)
ggplot(data = m1, aes(x = .fitted, y = .resid)) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed") +
xlab("Fitted values") +
ylab("Residuals")
# load packages -----------------------------------------------------
library(openintro)
# load data ---------------------------------------------------------
data(bdims)
# plot height vs. shoulder girth ------------------------------------
par(mar = c(3.8, 3.8, 0.5, 0.5), las = 1, mgp = c(2.7, 0.7, 0),
cex.lab = 1.25, cex.axis = 1.25)
plot(bdims$hgt ~ bdims$sho.gi,
xlab = "Shoulder girth (cm)", ylab = "Height (cm)",
pch = 19, col = COL[1,2])
# load packages -----------------------------------------------------
library(openintro)
# load data ---------------------------------------------------------
data(bdims)
# plot height vs. shoulder girth ------------------------------------
par(mar = c(3.8, 3.8, 0.5, 0.5), las = 1, mgp = c(2.7, 0.7, 0),
cex.lab = 1.25, cex.axis = 1.25)
plot(bdims$hgt ~ bdims$sho.gi,
xlab = "Shoulder girth (cm)", ylab = "Height (cm)",
pch = 19, col = COL[1,2])
# load packages -----------------------------------------------------
library(openintro)
library(xtable)
library(MASS)
# load data ---------------------------------------------------------
data(cats)
# model heart weight vs. weight -------------------------------------
m_cats_hwt_bwt <- lm(cats$Hwt ~ cats$Bwt)
# plot heart weight vs. weight --------------------------------------
par(mar = c(3.7, 3.7, 0.5, 0.5), las = 1, mgp = c(2.5, 0.7, 0),
cex.lab = 1.5, cex.axis = 1.5)
plot(cats$Hwt ~ cats$Bwt,
xlab = "Body weight (kg)", ylab = "Heart weight (g)",
pch = 19, col = COL[1,2],
xlim = c(2,4), ylim = c(5, 20.5), axes = FALSE)
axis(1, at = seq(2, 4, 0.5))
axis(2, at = seq(5, 20, 5))
box()
ggplot(cats, aes(x = Bwt, y = Hwt)) + geom_point(shape=1) + geom_smooth(method = "lm")
ggplot(cats, aes(x = Bwt, y = Hwt)) + geom_point(shape=1) + geom_smooth(method = "lm")
cats %>%
summarise(cor(Bwt, Hwt, use = "complete.obs"))
cor.test(cats$Bwt, cats$Hwt)
ggplot(cats, aes(x = Bwt, y = Hwt)) + geom_point(shape=1) + geom_smooth(method = "lm")
cats %>%
summarise(cor(Bwt, Hwt, use = "complete.obs"))
cor.test(cats$Bwt, cats$Hwt)
cts.bhwt <- lm(Bwt ~ Hwt, data = cats)
summary(cts.bhwt)
plot_ss(x = Bwt, y = Hwt, data = cats, showSquares = TRUE)
ggplot(cats, aes(x = Bwt, y = Hwt)) + geom_point(shape=1) + geom_smooth(method = "lm")
cats %>%
summarise(cor(Bwt, Hwt, use = "complete.obs"))
cor.test(cats$Bwt, cats$Hwt)
cts.bhwt <- lm(Bwt ~ Hwt, data = cats)
summary(cts.bhwt)
plot_ss(x = Bwt, y = Hwt, data = cats, showSquares = TRUE)
cats %>%
summarise(cor(Bwt, Hwt, use = "complete.obs"))
# load packages -----------------------------------------------------
library(openintro)
# load data ---------------------------------------------------------
prof_evals_beauty <- read.csv("https://github.com/jbryer/DATA606Fall2019/raw/master/course_data/prof_evals_beauty.csv")
# rename variables for convenience ----------------------------------
beauty <- prof_evals_beauty$btystdave
eval <- prof_evals_beauty$courseevaluation
# model evaluation scores vs. beauty --------------------------------
m_eval_beauty = lm(eval ~ beauty)
# scatterplot of evaluation scores vs. beauty -----------------------
par(mar = c(3.9, 3.9, 0.5, 0.5), las = 0, mgp = c(2.7, 0.7, 0),
cex.lab = 1.5, cex.axis = 1.5, las = 1)
plot(eval ~ beauty,
xlab = "Beauty", ylab = "Teaching evaluation",
pch = 19, col = COL[1,2],
axes = FALSE)
axis(1, at = seq(-1, 2, 1))
axis(2, at = seq(2, 5, 1))
box()
# residuals plot ----------------------------------------------------
par(mar = c(3.9, 3.9, 0.5, 0.5), las = 0, mgp = c(2.7, 0.7, 0),
cex.lab = 1.5, cex.axis = 1.5, las = 1)
plot(m_eval_beauty$residuals ~ beauty,
xlab = "Beauty", ylab = "Residuals",
pch = 19, col = COL[1,2],
ylim = c(-1.82, 1.82), axes = FALSE)
axis(1, at = seq(-1, 2, 1))
axis(2, at = seq(-1, 1, 1))
box()
abline(h = 0, lty = 3)
# residuals histogram -----------------------------------------------
par(mar = c(3.9, 3, 0, 0), cex.lab = 1.5, cex.axis = 1.5)
hist(m_eval_beauty$residuals,
xlab = "Residuals", ylab = "", main = "",
col = COL[1],
xlim = c(-2,2))
# normal probability plot of residuals ------------------------------
par(mar = c(3.9, 3.9, 0.5, 0.5), mgp = c(2.7, 0.7, 0),
cex.lab = 1.5, cex.axis = 1.5)
qqnorm(m_eval_beauty$residuals,
pch = 19, col = COL[1,2],
main = "", las = 0)
qqline(m_eval_beauty$residuals, col = COL[1])
# order of residuals ---------------------------------------------===
par(mar = c(3.9, 3.9, 0.5, 0.5), mgp = c(2.7, 0.7, 0),
cex.lab = 1.5, cex.axis = 1.5)
plot(m_eval_beauty$residuals,
xlab = "Order of data collection", ylab = "Residuals", main = "",
pch = 19, col = COL[1,2],
ylim = c(-1.82, 1.82), axes = FALSE)
axis(1)
axis(2, at = seq(-1, 1, 1))
box()
abline(h = 0, lty = 3)
plot_ss(x = beauty, y = eval, data = prof_evals_beauty, showSquares = TRUE)
# load data ---------------------------------------------------------
prof_evals_beauty <- read.csv("https://github.com/jbryer/DATA606Fall2019/raw/master/course_data/prof_evals_beauty.csv")
# load packages -----------------------------------------------------
library(openintro)
# load data ---------------------------------------------------------
prof_evals_beauty <- read.csv("https://github.com/jbryer/DATA606Fall2019/raw/master/course_data/prof_evals_beauty.csv")
# rename variables for convenience ----------------------------------
beauty <- prof_evals_beauty$btystdave
eval <- prof_evals_beauty$courseevaluation
# model evaluation scores vs. beauty --------------------------------
m_eval_beauty = lm(eval ~ beauty)
# scatterplot of evaluation scores vs. beauty -----------------------
par(mar = c(3.9, 3.9, 0.5, 0.5), las = 0, mgp = c(2.7, 0.7, 0),
cex.lab = 1.5, cex.axis = 1.5, las = 1)
plot(eval ~ beauty,
xlab = "Beauty", ylab = "Teaching evaluation",
pch = 19, col = COL[1,2],
axes = FALSE)
axis(1, at = seq(-1, 2, 1))
axis(2, at = seq(2, 5, 1))
box()
plot_ss(x = beauty, y = eval, data = prof_evals_beauty, showSquares = TRUE)
# model evaluation scores vs. beauty --------------------------------
m_eval_beauty = lm(eval ~ beauty)
# rename variables for convenience ----------------------------------
beauty <- prof_evals_beauty$btystdave
eval <- prof_evals_beauty$courseevaluation
# rename variables for convenience ----------------------------------
beauty <- prof_evals_beauty$btystdave
eval <- prof_evals_beauty$courseevaluation
plot_ss(x = beauty, y = eval, data = prof_evals_beauty, showSquares = TRUE)
plot_ss(x = beauty, y = eval, data = prof_evals_beauty, showSquares = TRUE)
plot_ss(x = beauty, y = eval, data = prof_evals_beauty, showSquares = TRUE)
prof_evals_beauty
# load packages -----------------------------------------------------
library(openintro)
# load data ---------------------------------------------------------
prof_evals_beauty <- read.csv("https://github.com/jbryer/DATA606Fall2019/raw/master/course_data/prof_evals_beauty.csv")
# rename variables for convenience ----------------------------------
beauty <- prof_evals_beauty$btystdave
eval <- prof_evals_beauty$courseevaluation
# model evaluation scores vs. beauty --------------------------------
m_eval_beauty = lm(eval ~ beauty)
# scatterplot of evaluation scores vs. beauty -----------------------
par(mar = c(3.9, 3.9, 0.5, 0.5), las = 0, mgp = c(2.7, 0.7, 0),
cex.lab = 1.5, cex.axis = 1.5, las = 1)
plot(eval ~ beauty,
xlab = "Beauty", ylab = "Teaching evaluation",
pch = 19, col = COL[1,2],
axes = FALSE)
axis(1, at = seq(-1, 2, 1))
axis(2, at = seq(2, 5, 1))
box()
library(statsr)
# rename variables for convenience ----------------------------------
beauty <- prof_evals_beauty$btystdave
eval <- prof_evals_beauty$courseevaluation
prof_evals_beauty
plot_ss(x = btystdave, y = courseevaluation, data = prof_evals_beauty, showSquares = TRUE)
