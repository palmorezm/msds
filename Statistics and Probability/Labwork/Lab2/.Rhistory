knitr::opts_chunk$set(echo = TRUE)
install.packages("tinytex")
install.packages("LaTex")
install.packages(c("backports", "broom", "dbplyr", "digest", "fs", "glue", "isoband", "lubridate", "modelr", "pillar", "pkgbuild", "ps", "purrr", "Rcpp", "reshape2", "reticulate", "rlang", "tibble", "tidyr", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "dbplyr", "digest", "fs", "glue", "isoband", "lubridate", "modelr", "pillar", "pkgbuild", "ps", "purrr", "Rcpp", "reshape2", "reticulate", "rlang", "tibble", "tidyr", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "dbplyr", "digest", "fs", "glue", "isoband", "lubridate", "modelr", "pillar", "pkgbuild", "ps", "purrr", "Rcpp", "reshape2", "reticulate", "rlang", "tibble", "tidyr", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "dbplyr", "digest", "fs", "glue", "isoband", "lubridate", "modelr", "pillar", "pkgbuild", "ps", "purrr", "Rcpp", "reshape2", "reticulate", "rlang", "tibble", "tidyr", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "dbplyr", "digest", "fs", "glue", "isoband", "lubridate", "modelr", "pillar", "pkgbuild", "ps", "purrr", "Rcpp", "reshape2", "reticulate", "rlang", "tibble", "tidyr", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "dbplyr", "digest", "fs", "glue", "isoband", "lubridate", "modelr", "pillar", "pkgbuild", "ps", "purrr", "Rcpp", "reshape2", "reticulate", "rlang", "tibble", "tidyr", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "dbplyr", "digest", "fs", "glue", "isoband", "lubridate", "modelr", "pillar", "pkgbuild", "ps", "purrr", "Rcpp", "reshape2", "reticulate", "rlang", "tibble", "tidyr", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "dbplyr", "digest", "fs", "glue", "isoband", "lubridate", "modelr", "pillar", "pkgbuild", "ps", "purrr", "Rcpp", "reshape2", "reticulate", "rlang", "tibble", "tidyr", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "dbplyr", "digest", "fs", "glue", "isoband", "lubridate", "modelr", "pillar", "pkgbuild", "ps", "purrr", "Rcpp", "reshape2", "reticulate", "rlang", "tibble", "tidyr", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "dbplyr", "digest", "fs", "glue", "isoband", "lubridate", "modelr", "pillar", "pkgbuild", "ps", "purrr", "Rcpp", "reshape2", "reticulate", "rlang", "tibble", "tidyr", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "dbplyr", "digest", "fs", "glue", "isoband", "lubridate", "modelr", "pillar", "pkgbuild", "ps", "purrr", "Rcpp", "reshape2", "reticulate", "rlang", "tibble", "tidyr", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "dbplyr", "digest", "fs", "glue", "isoband", "lubridate", "modelr", "pillar", "pkgbuild", "ps", "purrr", "Rcpp", "reshape2", "reticulate", "rlang", "tibble", "tidyr", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "dbplyr", "digest", "fs", "glue", "isoband", "lubridate", "modelr", "pillar", "pkgbuild", "ps", "purrr", "Rcpp", "reshape2", "reticulate", "rlang", "tibble", "tidyr", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "dbplyr", "digest", "fs", "glue", "isoband", "lubridate", "modelr", "pillar", "pkgbuild", "ps", "purrr", "Rcpp", "reshape2", "reticulate", "rlang", "tibble", "tidyr", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "dbplyr", "digest", "fs", "glue", "isoband", "lubridate", "modelr", "pillar", "pkgbuild", "ps", "purrr", "Rcpp", "reshape2", "reticulate", "rlang", "tibble", "tidyr", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "dbplyr", "digest", "fs", "glue", "isoband", "lubridate", "modelr", "pillar", "pkgbuild", "ps", "purrr", "Rcpp", "reshape2", "reticulate", "rlang", "tibble", "tidyr", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "dbplyr", "digest", "fs", "glue", "isoband", "lubridate", "modelr", "pillar", "pkgbuild", "ps", "purrr", "Rcpp", "reshape2", "reticulate", "rlang", "tibble", "tidyr", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "dbplyr", "digest", "fs", "glue", "isoband", "lubridate", "modelr", "pillar", "pkgbuild", "ps", "purrr", "Rcpp", "reshape2", "reticulate", "rlang", "tibble", "tidyr", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "dbplyr", "digest", "fs", "glue", "isoband", "lubridate", "modelr", "pillar", "pkgbuild", "ps", "purrr", "Rcpp", "reshape2", "reticulate", "rlang", "tibble", "tidyr", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "dbplyr", "digest", "fs", "glue", "isoband", "lubridate", "modelr", "pillar", "pkgbuild", "ps", "purrr", "Rcpp", "reshape2", "reticulate", "rlang", "tibble", "tidyr", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "dbplyr", "digest", "fs", "glue", "isoband", "lubridate", "modelr", "pillar", "pkgbuild", "ps", "purrr", "Rcpp", "reshape2", "reticulate", "rlang", "tibble", "tidyr", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "dbplyr", "digest", "fs", "glue", "isoband", "lubridate", "modelr", "pillar", "pkgbuild", "ps", "purrr", "Rcpp", "reshape2", "reticulate", "rlang", "tibble", "tidyr", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "dbplyr", "digest", "fs", "glue", "isoband", "lubridate", "modelr", "pillar", "pkgbuild", "ps", "purrr", "Rcpp", "reshape2", "reticulate", "rlang", "tibble", "tidyr", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "dbplyr", "digest", "fs", "glue", "isoband", "lubridate", "modelr", "pillar", "pkgbuild", "ps", "purrr", "Rcpp", "reshape2", "reticulate", "rlang", "tibble", "tidyr", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "dbplyr", "digest", "fs", "glue", "isoband", "lubridate", "modelr", "pillar", "pkgbuild", "ps", "purrr", "Rcpp", "reshape2", "reticulate", "rlang", "tibble", "tidyr", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "dbplyr", "digest", "fs", "glue", "isoband", "lubridate", "modelr", "pillar", "pkgbuild", "ps", "purrr", "Rcpp", "reshape2", "reticulate", "rlang", "tibble", "tidyr", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "dbplyr", "digest", "fs", "glue", "isoband", "lubridate", "modelr", "pillar", "pkgbuild", "ps", "purrr", "Rcpp", "reshape2", "reticulate", "rlang", "tibble", "tidyr", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "dbplyr", "digest", "fs", "glue", "isoband", "lubridate", "modelr", "pillar", "pkgbuild", "ps", "purrr", "Rcpp", "reshape2", "reticulate", "rlang", "tibble", "tidyr", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "dbplyr", "digest", "fs", "glue", "isoband", "lubridate", "modelr", "pillar", "pkgbuild", "ps", "purrr", "Rcpp", "reshape2", "reticulate", "rlang", "tibble", "tidyr", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "dbplyr", "digest", "fs", "glue", "isoband", "lubridate", "modelr", "pillar", "pkgbuild", "ps", "purrr", "Rcpp", "reshape2", "reticulate", "rlang", "tibble", "tidyr", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "dbplyr", "digest", "fs", "glue", "isoband", "lubridate", "modelr", "pillar", "pkgbuild", "ps", "purrr", "Rcpp", "reshape2", "reticulate", "rlang", "tibble", "tidyr", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "dbplyr", "digest", "fs", "glue", "isoband", "lubridate", "modelr", "pillar", "pkgbuild", "ps", "purrr", "Rcpp", "reshape2", "reticulate", "rlang", "tibble", "tidyr", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "dbplyr", "digest", "fs", "glue", "isoband", "lubridate", "modelr", "pillar", "pkgbuild", "ps", "purrr", "Rcpp", "reshape2", "reticulate", "rlang", "tibble", "tidyr", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "dbplyr", "digest", "fs", "glue", "isoband", "lubridate", "modelr", "pillar", "pkgbuild", "ps", "purrr", "Rcpp", "reshape2", "reticulate", "rlang", "tibble", "tidyr", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "dbplyr", "digest", "fs", "glue", "isoband", "lubridate", "modelr", "pillar", "pkgbuild", "ps", "purrr", "Rcpp", "reshape2", "reticulate", "rlang", "tibble", "tidyr", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "dbplyr", "digest", "fs", "glue", "isoband", "lubridate", "modelr", "pillar", "pkgbuild", "ps", "purrr", "Rcpp", "reshape2", "reticulate", "rlang", "tibble", "tidyr", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "dbplyr", "digest", "fs", "glue", "isoband", "lubridate", "modelr", "pillar", "pkgbuild", "ps", "purrr", "Rcpp", "reshape2", "reticulate", "rlang", "tibble", "tidyr", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "dbplyr", "digest", "fs", "glue", "isoband", "lubridate", "modelr", "pillar", "pkgbuild", "ps", "purrr", "Rcpp", "reshape2", "reticulate", "rlang", "tibble", "tidyr", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "dbplyr", "digest", "fs", "glue", "isoband", "lubridate", "modelr", "pillar", "pkgbuild", "ps", "purrr", "Rcpp", "reshape2", "reticulate", "rlang", "tibble", "tidyr", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "dbplyr", "digest", "fs", "glue", "isoband", "lubridate", "modelr", "pillar", "pkgbuild", "ps", "purrr", "Rcpp", "reshape2", "reticulate", "rlang", "tibble", "tidyr", "withr", "xfun", "xml2"))
install.packages(c("backports", "broom", "dbplyr", "digest", "fs", "glue", "isoband", "lubridate", "modelr", "pillar", "pkgbuild", "ps", "purrr", "Rcpp", "reshape2", "reticulate", "rlang", "tibble", "tidyr", "withr", "xfun", "xml2"))
knitr::opts_chunk$set(echo = TRUE)
install.packages("contrib.url")
install.packages("Rtools")
install.packages("contrib.url")
install.packages("RCurl")
library(latexpdf)
library(tinytex)
library(latexpdf)
library(latexpdf)
library(MiKTeX)
library(latexpdf)
## R Markdown
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
library(latexpdf)
knitr::opts_chunk$set(echo = TRUE)
```{r pressure, echo=FALSE}
library("latexpdf")
)
library(tinytex)
library(xtable)
install.packages(c("latexpdf", "latex2exp", "tinytex", "xtable"))
unlink('C:/Users/Owner/Desktop/Sleep Analysis_cache', recursive = TRUE)
install.packages("TinyTex")
install.packages("tinytex")
library(tinytex)
unlink('C:/Users/Owner/Desktop/HW1_cache', recursive = TRUE)
library(glue)
install.packages("git")
install.packages("tinytex")
tinytex::install_tinytex()
quit()
tinytex::is_tinytex()
tinytex::is_tinytex()
tinytex::tinytex_root()
library(readr)
getwd()
knitr::opts_chunk$set(echo = TRUE)
read.csv("https://raw.githubusercontent.com/fivethirtyeight/data/master/urbanization-index/urbanization-census-tract.csv", TRUE, ",")
library(readr)
read.csv("https://raw.githubusercontent.com/fivethirtyeight/data/master/urbanization-index/urbanization-census-tract.csv", TRUE, ",")
library(readr)
538_DensityIndex <- read.csv("https://raw.githubusercontent.com/fivethirtyeight/data/master/urbanization-index/urbanization-census-tract.csv", TRUE, ",")
library(readr)
538DensityIndex <- read.csv("https://raw.githubusercontent.com/fivethirtyeight/data/master/urbanization-index/urbanization-census-tract.csv", TRUE, ",")
library(readr)
read.csv("https://raw.githubusercontent.com/fivethirtyeight/data/master/urbanization-index/urbanization-census-tract.csv", TRUE, ",")
library(readr)
Data <- read.csv("https://raw.githubusercontent.com/fivethirtyeight/data/master/urbanization-index/urbanization-census-tract.csv", TRUE, ",")
library(readr)
UrbanIndexData <- read.csv("https://raw.githubusercontent.com/fivethirtyeight/data/master/urbanization-index/urbanization-census-tract.csv", TRUE, ",")
head(UrbanIndexData)
install.packages(c('openintro','OIdata','devtools','tidyverse', 'ggplot2',
'psych','reshape2','knitr','markdown','shiny','R.rsp',
'fivethirtyeight'))
devtools::install_github("jbryer/DATA606")
library("DAT606")
remove.packages("glue")
libPaths()
Sys.getenv()
install.packages("pacman")
install.packages(c('openintro','OIdata','devtools','tidyverse', 'ggplot2',
'psych','reshape2','knitr','markdown','shiny','R.rsp',
'fivethirtyeight'))
devtools::install_github("jbryer/DATA606")
library("DATA606")
vignette('os4')
vignette('os4')
vignette("os4")
viewLab('Lab1')
getLabs()
viewLab("Lab1")
viewLab("Lab2")
viewLab("Lab3")
vignette("os3")
data(package='DATA606')
devtools::install_github("jbryer/DATA606")
force = TRUE
'force = TRUE''
/
\
stop
forcfstop()
install.packages("Rtools")
library(DATA606)
library('DATA606')
install.Rtools(choose_version = TRUE, check = FALSE, GUI = TRUE,
page_with_download_url = "https://cran.r-project.org/bin/windows/Rtools/",
...)
library(installr)
install.Rtools()
library("DATA606")
knitr::include_graphics("img/r-interface-2020.png")
library(DATA606)
library(DATA606)
library(openintro)
library(DATA606)
viewLab(Lab2)
viewLab('Lab2')
getLabs()
viewLab("lab2")
Lab2
startLab("Lab2")
library(tidyverse)
library(openintro)
data(nycflights)
data("nycflights")
names(nycflights)
?nycflights
?nycflights
glimpse(nycflights)
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram()
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram(binwidth = 15)
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram(binwidth = 150)
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram()
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram()
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram()
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram(binwidth = 15)
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram(binwidth = 150)
lax_flights <- nycflights %>%
filter(dest == "LAX")
ggplot(data = lax_flights, aes(x = dep_delay)) +
geom_histogram()
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram()
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram()
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram()
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram(binwidth = 15)
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram(binwidth = 150)
lax_flights <- nycflights %>%
filter(dest == "LAX")
ggplot(data = lax_flights, aes(x = dep_delay)) +
geom_histogram()
lax_flights %>%
summarise(mean_dd   = mean(dep_delay),
median_dd = median(dep_delay),
n         = n())
sfo_feb_flights <- nycflights %>%
filter(dest == "SFO", month == 2)
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram()
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram(binwidth = 15)
# For reference, below adjusts bin size to 150 for comparison
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram(binwidth = 150)
sfo_feb_flights <- nycflights %>%
filter(dest == "SFO", month == 2)
glimpse(sfo_feb_flights)
ggplot(data = sfo_feb_flights, aes(x = dep_delay)) +
geom_histogram(binwidth = 15)
ggplot(data = sfo_feb_flights, aes(x = dep_delay)) +
geom_histogram(binwidth = 150)
ggplot(data = sfo_feb_flights, aes(x = dep_delay)) +
geom_histogram(binwidth = 30)
ggplot(data = sfo_feb_flights, aes(x = dep_delay)) +
geom_histogram(binwidth = 15)
ggplot(data = sfo_feb_flights, aes(x = arr_delay)) +
geom_histogram(binwidth = 15)
ggplot(data = sfo_feb_flights, aes(x = arr_delay)) +
geom_histogram(binwidth = 10)
ggplot(data = sfo_feb_flights, aes(x = arr_delay)) +
geom_histogram(binwidth = 5)
ggplot(data = sfo_feb_flights, aes(x = arr_delay)) +
geom_histogram(binwidth = 10)
sfo_feb_flights %>%
group_by(origin) %>%
summarise(median_dd = median(dep_delay), iqr_dd = IQR(dep_delay), n_flights = n())
View(sfo_feb_flights)
sfo_feb_flights %>%
group_by(carrier) %>%
summarise(median_ad = median(arr_delay), iqr_dd = IQR(arr_delay), n_flights = n())
ggplot(data = sfo_feb_flights, aes(x = arr_delay)) +
geom_boxplot()
flights_by_carrier <- sfo_feb_flights %>%
group_by(carrier)
View(flights_by_carrier)
flights_by_carrier <- sfo_feb_flights %>%
group_by(carrier)
ggplot(data = flights_by_carrier, aes(x = arr_delay)) +
geom_boxplot()
AA_flights_by <- sfo_feb_flights %>%
group_by(carrier == AA)
AA_flights_by <- sfo_feb_flights %>%
group_by(carrier == "AA")
glimpse(AA_flights_by)
AA_flights_by <- sfo_feb_flights %>%
group_by(carrier == "AA")
B6_flights_by <- sfo_feb_flights %>%
group_by(carrier == "B6")
DL_flights_by <- sfo_feb_flights %>%
group_by(carrier == "DL")
UA_flights_by <- sfo_feb_flights %>%
group_by(carrier == "UA")
VX_flights_by <- sfo_feb_flights %>%
group_by(carrier == "VX")
ggplot(data = AA_flights_by, aes(x = arr_delay)) +
geom_boxplot()
# Creating flights by each carrier
AA_flights_by <- sfo_feb_flights %>%
group_by(carrier == "AA")
B6_flights_by <- sfo_feb_flights %>%
group_by(carrier == "B6")
DL_flights_by <- sfo_feb_flights %>%
group_by(carrier == "DL")
UA_flights_by <- sfo_feb_flights %>%
group_by(carrier == "UA")
VX_flights_by <- sfo_feb_flights %>%
group_by(carrier == "VX")
# Displaying each carrier's flight data as a boxplot
ggplot(data = AA_flights_by, aes(x = arr_delay)) +
geom_boxplot()
ggplot(data = B6_flights_by, aes(x = arr_delay)) +
geom_boxplot()
ggplot(data = DL_flights_by, aes(x = arr_delay)) +
geom_boxplot()
# Creating flights by each carrier
AA_flights_by <- sfo_feb_flights %>%
group_by(carrier == "AA")
B6_flights_by <- sfo_feb_flights %>%
group_by(carrier == "B6")
DL_flights_by <- sfo_feb_flights %>%
group_by(carrier == "DL")
UA_flights_by <- sfo_feb_flights %>%
group_by(carrier == "UA")
VX_flights_by <- sfo_feb_flights %>%
group_by(carrier == "VX")
# Displaying each carrier's flight data as a boxplot
ggplot(data = AA_flights_by, aes(x = arr_delay)) +
geom_boxplot()
ggplot(data = B6_flights_by, aes(x = arr_delay)) +
geom_boxplot()
ggplot(data = DL_flights_by, aes(x = arr_delay)) +
geom_boxplot()
ggplot(data = UA_flights_by, aes(x = arr_delay)) +
geom_boxplot()
ggplot(data = VX_flights_by, aes(x = arr_delay)) +
geom_boxplot()
View(AA_flights_by)
AA_flights_by <- sfo_feb_flights %>%
select(carrier == "AA")
AA_flights <- subset(sfo_feb_flights, carrier =="AA", select = c(arr_delay, carrier))
View(AA_flights)
AA_flights <- subset(sfo_feb_flights, carrier =="AA", select = c(arr_delay, carrier))
B6_flights <- subset(sfo_feb_flights, carrier =="B6", select = c(arr_delay, carrier))
DL_flights <- subset(sfo_feb_flights, carrier =="DL", select = c(arr_delay, carrier))
UA_flights <- subset(sfo_feb_flights, carrier =="UA", select = c(arr_delay, carrier))
VX_flights <- subset(sfo_feb_flights, carrier =="VX", select = c(arr_delay, carrier))
# Displaying each carrier's flight data as a boxplot
ggplot(data = AA_flights, aes(x = arr_delay)) +
geom_boxplot()
library(tidyverse)
library(openintro)
data("nycflights")
names(nycflights)
?nycflights
glimpse(nycflights)
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram()
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram(binwidth = 15)
# For reference, below adjusts bin size to 150 for comparison
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram(binwidth = 150)
# Each graph is:
# Right skewed (long tail extending towards positive values)
# Unimodal
# Differences:
# Bin 30
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram()
# High density at 30 minutes or less
# No clusters left of 30 shown
# Bin 15
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram(binwidth = 15)
# Shows 15 minutes or less (not present before binwidth = 15)
# Shows a more steady decline in distribution
# Not a lot of deviation from range 15 - 30 minutes
# Values greater than 150 are very uncommon
# Bin 150
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram(binwidth = 150)
# High density at 150 minutes or less
# No clusters left of 150 shown
# So heavily clustered in the 0-150 bar there is almost no distribution
# Values in 150+ ranges are displayed prominantly but contain many outliers
sfo_feb_flights <- nycflights %>%
filter(dest == "SFO", month == 2)
glimpse(sfo_feb_flights)
ggplot(data = sfo_feb_flights, aes(x = arr_delay)) +
geom_histogram(binwidth = 10)
sfo_feb_flights %>%
group_by(carrier) %>%
summarise(median_ad = median(arr_delay), iqr_dd = IQR(arr_delay), n_flights = n())
# Creating flights by each carrier
AA_flights <- subset(sfo_feb_flights, carrier =="AA", select = c(arr_delay, carrier))
B6_flights <- subset(sfo_feb_flights, carrier =="B6", select = c(arr_delay, carrier))
DL_flights <- subset(sfo_feb_flights, carrier =="DL", select = c(arr_delay, carrier))
UA_flights <- subset(sfo_feb_flights, carrier =="UA", select = c(arr_delay, carrier))
VX_flights <- subset(sfo_feb_flights, carrier =="VX", select = c(arr_delay, carrier))
# Displaying each carrier's flight data as a boxplot
ggplot(data = AA_flights, aes(x = arr_delay)) +
geom_boxplot()
ggplot(data = B6_flights, aes(x = arr_delay)) +
geom_boxplot()
ggplot(data = DL_flights, aes(x = arr_delay)) +
geom_boxplot()
ggplot(data = UA_flights, aes(x = arr_delay)) +
geom_boxplot()
ggplot(data = VX_flights, aes(x = arr_delay)) +
geom_boxplot()
# Displaying each carrier's flight data as a boxplot
ggplot(data = AA_flights, aes(x = arr_delay)) +
geom_boxplot() +
ggplot(data = B6_flights, aes(x = arr_delay)) +
geom_boxplot()
# Displaying each carrier's flight data as a boxplot
ggplot(data = AA_flights, aes(x = arr_delay)) +
geom_boxplot()
ggplot(data = B6_flights, aes(x = arr_delay)) +
geom_boxplot()
ggplot(data = DL_flights, aes(x = arr_delay)) +
geom_boxplot()
ggplot(data = UA_flights, aes(x = arr_delay)) +
geom_boxplot()
ggplot(data = VX_flights, aes(x = arr_delay)) +
geom_boxplot()
sfo_feb_flights <- sfo_feb_flights %>%
group_by(carrier)
)
ggplot(data = sfo_feb_flights, aes(x = arr_delay, y = carrier) +
geom_boxplot() )
ggplot(data = sfo_feb_flights, aes(x = arr_delay, y = carrier) +
geom_boxplot() )
ggplot(data = sfo_feb_flights, aes(x = arr_delay) aes(y = carrier) +
View(sfo_feb_flights)
ggplot(data = sfo_feb_flights, aes(x = arr_delay, y="carrier") +
geom_boxplot() )
ggplot(data = sfo_feb_flights, aes(x = arr_delay, y="carrier")) +
geom_boxplot()
ggplot(data = sfo_feb_flights, aes(x ="carrier", y=arr_delay)) +
geom_boxplot()
ggplot(data = sfo_feb_flights, aes(x =carrier, y=arr_delay)) +
geom_boxplot()
ggplot(data = sfo_feb_flights, aes(x =carrier, y=arr_delay)) +
geom_boxplot()
sfo_feb_flights %>%
group_by(carrier) %>%
summarise(max_ad = max(arr_delay),
min_ad = min(arr_delay),
range_ad = (max_ad-min_ad),
n_flights = n())
231/21
22/21
22/19
sfo_feb_flights %>%
group_by(carrier) %>%
summarise(median_ad = median(arr_delay), iqr_ad = IQR(arr_delay), n_flights = n())
sfo_feb_flights %>%
group_by(carrier) %>%
summarise(max_ad = max(arr_delay),
min_ad = min(arr_delay),
range_ad = (max_ad-min_ad),
n_flights = n(),
MPF_IQR_ad = IQR(arr_delay)/n_flights,
MPF_Range_ad = range_ad/n_flights)
sfo_feb_flights %>%
group_by(carrier) %>%
summarise(max_ad = max(arr_delay),
min_ad = min(arr_delay),
range_ad = (max_ad-min_ad),
n_flights = n(),
MPF_IQR_ad = IQR(arr_delay)/n_flights,
MPF_Range_ad = range_ad/n_flights)
sfo_feb_flights %>%
group_by(carrier) %>%
summarise(max_ad = max(arr_delay),
min_ad = min(arr_delay),
range_ad = (max_ad-min_ad),
n_flights = n(),
MPF_IQR_ad = signif((IQR(arr_delay)/n_flights), digits = 3)
MPF_Range_ad = signif((range_ad/n_flights), digits = 3
sfo_feb_flights %>%
group_by(carrier) %>%
summarise(max_ad = max(arr_delay),
min_ad = min(arr_delay),
range_ad = (max_ad-min_ad),
n_flights = n(),
MPF_IQR_ad = signif((IQR(arr_delay)/n_flights), digits = 3),
MPF_Range_ad = signif((range_ad/n_flights), digits = 3)
sfo_feb_flights %>%
group_by(carrier) %>%
summarise(max_ad = max(arr_delay),
min_ad = min(arr_delay),
range_ad = (max_ad-min_ad),
n_flights = n(),
MPF_IQR_ad = signif((IQR(arr_delay)/n_flights), digits = 3),
MPF_Range_ad = signif((range_ad/n_flights), digits = 3))
sfo_feb_flights %>%
group_by(carrier) %>%
summarise(max_ad = max(arr_delay),
min_ad = min(arr_delay),
range_ad = (max_ad-min_ad),
median_ad = median(arr_delay),
iqr_ad = IQR(arr_delay),
n_flights = n(),
MPF_IQR_ad = signif((IQR(arr_delay)/n_flights), digits = 3),
MPF_Range_ad = signif((range_ad/n_flights), digits = 3))
(231+22)/21
sfo_feb_flights %>%
group_by(carrier) %>%
summarise(max_ad = max(arr_delay),
min_ad = min(arr_delay),
range_ad = (max_ad-min_ad),
mean_ad = mean(arr_delay),
median_ad = median(arr_delay),
iqr_ad = IQR(arr_delay),
n_flights = n(),
MPF_IQR_ad = signif((IQR(arr_delay)/n_flights), digits = 3),
MPF_Range_ad = signif((range_ad/n_flights), digits = 3),
)
sfo_feb_flights %>%
group_by(carrier) %>%
summarise(mean_ad = mean(arr_delay), n_flights = n(), var_ad = mean(square((arr_delay)-mean_ad)))
var_ad = mean(square((arr_delay)-mean_ad)))
sfo_feb_flights %>%
group_by(carrier) %>%
summarise(mean_ad = mean(arr_delay), n_flights = n(), var_ad = mean(square((arr_delay)-mean_ad)/n_flights))
sfo_feb_flights %>%
group_by(carrier) %>%
summarise(mean_ad = mean(arr_delay), n_flights = n(), var_ad = mean((square((arr_delay)-mean_ad)))/n_flights)
install.packages(psyche)
install.packages(psych)
install.packages('psych')
library(psych)
sfo_feb_flights %>%
group_by(carrier) %>%
summarise(mean_ad = mean(arr_delay), n_flights = n(), var_ad = mean((square((arr_delay)-mean_ad)))/n_flights)
# Displaying each carrier's flight data as a boxplot
ggplot(data = sfo_feb_flights, aes(x =carrier, y=arr_delay)) +
geom_boxplot() + coord_flip()
ggplot(data = sfo_feb_flights, aes(x = arr_delay)) +
geom_histogram(binwidth = 20)
ggplot(data = sfo_feb_flights, aes(x = arr_delay)) +
geom_histogram(binwidth = 15)
ggplot(data = sfo_feb_flights, aes(x = arr_delay)) +
geom_histogram(binwidth = 10)
View(sfo_feb_flights)
knitr::opts_chunk$set(echo = TRUE)
library(openintro)
data(heartTr)
# mosaic plot -------------------------------------------------------
par(mar = c(0, 0, 0, 0), las = 1, mgp = c(2.7, 0.9, 0))
mosaicplot(transplant ~ survived, data = heartTr,
main = "", xlab = "", ylab = "", color = COL[1],
cex.axis = 1.5)
