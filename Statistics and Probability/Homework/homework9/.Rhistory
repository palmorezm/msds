knitr::opts_chunk$set(echo = TRUE)
plot(eq(0:20), type = "1")
eq <- function(x){123.05 - 8.94*x}
plot(eq(0:20), type = "1")
plot(eq(0:20), type = "b")
plot(eq(0:20), type = "c")
plot(eq(0:20), type = "a")
plot(eq(0:20), type = 1)
eq <- function(x){123.05 - 8.94*x}
plot(eq(0:20), type = 1)
plot(eq(0:20), type = "1")
plot(eq(0:20), type = "d")
plot(eq(0:20), type = "solid")
plot(eq(0:20))
plot(eq(0:20), type = "line")
plot(eq(0:20), type = "line", color = blues9)
plot(eq(0:12), type = "line", xlab = "Weight", ylab = "")
plot(eq(0:13), type = "line", xlab = "Weight", ylab = "")
plot(eq(0:14), type = "line", xlab = "Weight", ylab = "")
plot(eq(0:14), type = "line", xlab = "Smokes", ylab = "Baby Weight (oz)")
plot(eq(0:14), type = "line", xlab = "Smokes", ylab = "Avg Baby Weight (oz)")
data(babies)
attach(babies)
library(DATA606)
data(babies)
summary(lm(babies$bwt ~ babies$parity))
summary(lm(babies$bwt ~ babies$smoke))
summary(lm(babies$bwt ~ babies$smoke))
plot(eq(0:1), type = "line", xlab = "Smokes", ylab = "Avg Baby Weight (oz)")
plot(eq(), type = "line", xlab = "Smokes", ylab = "Avg Baby Weight (oz)")
plot(eq(O:2), type = "line", xlab = "Smokes", ylab = "Avg Baby Weight (oz)")
plot(eq(0:2), type = "line", xlab = "Smokes", ylab = "Avg Baby Weight (oz)")
plot(eq(0:0), type = "line", xlab = "Smokes", ylab = "Avg Baby Weight (oz)")
plot(eq(0:1), type = "line", xlab = "Smokes", ylab = "Avg Baby Weight (oz)")
# Baby born to smoker mother
123.05 - 8.94*1
# Baby born to non-smoker mother
123.05 - 8.94*0
eth <- 0
sex <- 1
lrn <- 1
total <- 18.93 - (9.11*eth) + (3.10*sex) + (2.15*lrn)
2 - total #missed 2 days of school
a <- 0
b <- 1
c <- 1
total <- 18.93 - (9.11*a) + (3.10*b) + (2.15*c)
2 - total #missed 2 days of school
round(1 - (240.57 / 264.17), 3)
round(1 - (240.57 / 264.17) * (146 - 1) / (146 - 3 - 1), 3)
1 - (240.57 / 264.17) * (146 - 1) / (146 - 3 - 1)
1 - (240.57 / 264.17)
Temperature <-  c(53, 57, 58, 63, 66, 67, 67, 67, 68, 69, 70, 70, 70, 70, 72, 73, 75, 75, 76, 76, 78, 79, 81)
Damaged <- c(5, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0)
Undamaged <- c(1, 5, 5, 5, 6, 6, 6, 6, 6, 6, 5, 6, 5, 6, 6, 6, 6, 5, 6, 6, 6, 6, 6)
cbind(Temperature, Damaged, Undamaged)
oringstats <- cbind(Temperature, Damaged, Undamaged)
getwd
tempdir()
dir.create(tempdir())
ggplot(oringstats aes(Temperature, Damaged)) + geom_point()
ggplot(oringstats, aes(Temperature, Damaged)) + geom_point()
orings
ggplot(oringstats, aes(Temperature, Damaged)) + geom_point()
oringstats
oringstats <- data.frame(cbind(Temperature, Damaged, Undamaged))
data.frame(oringstats)
oringstats <- data.frame(cbind(Temperature, Damaged, Undamaged))
oringstats
ggplot(oringstats, aes(Temperature, Damaged)) + geom_point()
ggplot(oringstats, aes(Temperature, Damaged)) + geom_point() + coord_flip()
ggplot(oringstats, aes(Temperature, Damaged)) + geom_dotplot() + coord_flip()
ggplot(oringstats, aes(Temperature, Damaged)) + geom_dotplot()
ggplot(oringstats, aes(Temperature, Damaged)) + geom_dotplot(Undamaged)
ggplot(oringstats, aes(Temperature, Damaged)) + geom_dotplot(aes(Undamaged)
ggplot(oringstats, aes(Temperature, Damaged)) + geom_dotplot(aes(Undamaged))
ggplot(oringstats, aes(Temperature, Damaged)) + geom_dotplot(oringstats, aes(Undamaged))
ggplot(oringstats, aes(Temperature, Damaged)) + geom_dotplot(oringstats, aes(Undamaged))
ggplot(oringstats, aes(Temperature, Damaged)) + geom_dotplot(oringstats, aes(y = Damaged))
ggplot(oringstats, aes(Temperature)) + geom_dotplot(oringstats, aes(y = Damaged))
ggplot(oringstats, aes(Temperature)) + geom_dotplot(aes(y = Damaged))
ggplot(oringstats, aes(Temperature)) + geom_dotplot()
ggplot(oringstats, aes(Temperature)) + geom_point()
ggplot(oringstats, aes(Temperature, Damaged)) + geom_point()
ggplot(oringstats, aes(Temperature, Unamaged)) + geom_point()
ggplot(oringstats, aes(Temperature, Undamaged)) + geom_point()
ggplot(oringstats, aes(Temperature, Undamaged)) + geom_histogram()
ggplot(oringstats, aes(Undamaged)) + geom_histogram()
ggplot(oringstats, aes(Undamaged), fill = Temperature) + geom_histogram()
ggplot(oringstats, aes(Undamaged)) + geom_histogram(aes(fill = Temperature))
ggplot(oringstats, aes(Undamaged)) + geom_histogram(aes(scale = Temperature))
ggplot(oringstats, aes(Undamaged)) + geom_col()
ggplot(oringstats, aes(Temperature, Undamaged)) + geom_col()
ggplot(oringstats, aes(Temperature, Undamaged)) + geom_col(aes(fill = Undamaged)
ggplot(oringstats, aes(Temperature, Undamaged)) + geom_col(aes(fill = Undamaged))
ggplot(oringstats, aes(Temperature, Undamaged)) + geom_col(aes(fill = Temperature))
ggplot(oringstats, aes(Temperature, Undamaged)) + geom_col(aes(fill = Temperature)) + coord_flip()
ggplot(oringstats, aes(Temperature, Damaged)) + geom_col(aes(fill = Temperature)) + coord_flip()
Temperature <-  c(53, 57, 58, 63, 66, 67, 67, 67, 68, 69, 70, 70, 70, 70, 72, 73, 75, 75, 76, 76, 78, 79, 81)
Damaged <- c(5, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0)
Undamaged <- c(1, 5, 5, 5, 6, 6, 6, 6, 6, 6, 5, 6, 5, 6, 6, 6, 6, 5, 6, 6, 6, 6, 6)
oringstats <- data.frame(cbind(Temperature, Damaged, Undamaged))
ggplot(oringstats, aes(Temperature, Damaged)) + geom_point()
ggplot(oringstats, aes(Temperature, Damaged)) + geom_col(aes(fill = Temperature)) + coord_flip()
library(openintro)
# load data ---------------------------------------------------------
if(!file.exists('orings.rda')) {
download.file('https://github.com/jbryer/DATA606Fall2019/blob/master/course_data/orings.rda?raw=true',
'orings.rda')
}
load("orings.rda")
set.seed(17)
# plot probability of damage vs. temperature ------------------------
these <- orings[,1] %in% c(67, 70, 76)
plot(orings[,1] +
c(rep(0, 5), c(-0.1, 0, 0.1), 0, 0, -0.07, -0.07, 0.07, 0.07,
rep(0, 4), -0.07, 0.07, 0, 0, 0),
orings[,2]/6,
xlab = "", ylab = "Probability of damage",
xlim = c(50, 82), ylim = c(0,1),
col = COL[1,2], pch = 19)
mtext("Temperature (Fahrenheit)", 1, 2)
# probability calculations ------------------------------------------
temperature <- c(51, 53, 55)
logitp <- 11.6630 - 0.2162 * temperature
p <- exp(logitp) / (1+exp(logitp))
# Using a loop
t = c(51,53,55) # add selected temperatures
fun <- function(t){
o  <- 11.6630 - 0.2162 * t  # use model paramters
Poi <- 100*(exp(o) / (1+exp(o))) # calculate probability
return(Poi)
}
sapply(t, fun)
sapply(Temperature, fun)
# Applying the function to the all Temperatures
# (This should show repeats of model-est probabilities given above)
meps <- sapply(Temperature, fun)
meps
# Applying the function to the all Temperatures
# (This should show repeats of model-est probabilities given above)
meps <- sapply(Temperature, fun) # Store as model - estimated probabilities - "meps"
# Then plot them over the change in temperature
plot(y=meps, x=t)
# Applying the function to the all Temperatures
# (This should show repeats of model-est probabilities given above)
meps <- sapply(Temperature, fun) # Store as model - estimated probabilities - "meps"
# Then plot them over the change in temperature
plot(y=meps, x=Temperature)
curve(fun(x), from=40,to=80,add=TRUE,xlab='o-ring damage',ylab='temperature')
curve(fun(x), from=20,to=80,add=TRUE,xlab='o-ring damage',ylab='temperature')
# Applying the function to the all Temperatures
# (This should show repeats of model-est probabilities given above)
meps <- sapply(Temperature, fun) # Store as model - estimated probabilities - "meps"
# Then plot them over the change in temperature
plot(y=meps, x=Temperature)
curve(fun(x), from=20,to=80,add=TRUE,xlab='o-ring damage',ylab='temperature')
# Applying the function to the all Temperatures
# (This should show repeats of model-est probabilities given above)
meps <- sapply(Temperature, fun) # Store as model - estimated probabilities - "meps"
# Then plot them over the change in temperature
plot(y=meps, x=Temperature)
curve(fun(x), from=0,to=80,add=TRUE,xlab='o-ring damage',ylab='temperature')
# Applying the function to the all Temperatures
# (This should show repeats of model-est probabilities given above)
meps <- sapply(Temperature, fun) # Store as model - estimated probabilities - "meps"
# Then plot them over the change in temperature
plot(y=meps, x=Temperature)
curve(fun(x), from=0,to=120,add=TRUE,xlab='o-ring damage',ylab='temperature')
# Applying the function to the all Temperatures
# (This should show repeats of model-est probabilities given above)
meps <- sapply(Temperature, fun) # Store as model - estimated probabilities - "meps"
# Then plot them over the change in temperature
plot(y=meps, x=Temperature)
curve(fun(x),add=TRUE,xlab='o-ring damage',ylab='temperature')
# Applying the function to the all Temperatures
# (This should show repeats of model-est probabilities given above)
meps <- sapply(Temperature, fun) # Store as model - estimated probabilities - "meps"
# Then plot them over the change in temperature
plot(y=meps, x=Temperature)
curve(fun(x),add=TRUE,xlab='Damage',ylab='temperature')
# Applying the function to the all Temperatures
# (This should show repeats of model-est probabilities given above)
meps <- sapply(Temperature, fun) # Store as model - estimated probabilities - "meps"
# Then plot them over the change in temperature
plot(y=meps, x=Temperature, xlab='o-ring damage',ylab='temperature' )
curve(fun(x), add=TRUE)
# Applying the function to the all Temperatures
# (This should show repeats of model-est probabilities given above)
meps <- sapply(Temperature, fun) # Store as model - estimated probabilities - "meps"
# Then plot them over the change in temperature
plot(y=meps, x=Temperature, xlab="Probability of O-Ring Damage")
curve(fun(x), add=TRUE)
# Applying the function to the all Temperatures
# (This should show repeats of model-est probabilities given above)
meps <- sapply(Temperature, fun) # Store as model - estimated probabilities - "meps"
# Then plot them over the change in temperature
plot(y=meps, x=Temperature, ylab="Probability of O-Ring Damage")
curve(fun(x), add=TRUE)
# Then plot them over the change in temperature
plot(y=meps, x=Temperature, ylab="Probability (%)", title = "Probability of O-Ring Damage using Temperature")
curve(fun(x), add=TRUE)
# Applying the function to the all Temperatures
# (This should show repeats of model-est probabilities given above)
meps <- sapply(Temperature, fun) # Store as model - estimated probabilities - "meps"
# Then plot them over the change in temperature
plot(y=meps, x=Temperature, ylab="Probability (%)", title = "Probability of O-Ring Damage using Temperature")
curve(fun(x), add=TRUE)
# Applying the function to the all Temperatures
# (This should show repeats of model-est probabilities given above)
meps <- sapply(Temperature, fun) # Store as model - estimated probabilities - "meps"
# Then plot them over the change in temperature
plot(y=meps, x=Temperature, ylab="Probability (%)", main = "Probability of O-Ring Damage using Temperature")
curve(fun(x), add=TRUE)
# Applying the function to the all Temperatures
# (This should show repeats of model-est probabilities given above)
meps <- sapply(Temperature, fun) # Store as model - estimated probabilities - "meps"
# Then plot them over the change in temperature
plot(y=meps, x=Temperature, ylab="Probability (%)", main = "Probability of O-Ring Damage", subtitle = "Using Temperature as a Proxy")
curve(fun(x), add=TRUE)
# Then plot them over the change in temperature
plot(y=meps, x=Temperature, ylab="Probability (%)", main = "Probability of O-Ring Damage", sub = "Using Temperature as a Proxy")
# Applying the function to the all Temperatures
# (This should show repeats of model-est probabilities given above)
meps <- sapply(Temperature, fun) # Store as model - estimated probabilities - "meps"
# Then plot them over the change in temperature
plot(y=meps, x=Temperature, ylab="Probability (%)", main = "Probability of O-Ring Damage with Heat", sub = "Using Temperature as a Proxy for Damaging O-Rings")
curve(fun(x), add=TRUE)
# Then plot them over the change in temperature
plot(y=meps, x=Temperature, ylab="Probability (%)", main = "Probability of O-Ring Damage with Heat", sub = "Using Temperature as a Proxy for Damaging O-Rings", type = "d")
# Then plot them over the change in temperature
plot(y=meps, x=Temperature, ylab="Probability (%)", main = "Probability of O-Ring Damage with Heat", sub = "Using Temperature as a Proxy for Damaging O-Rings", type = "solid")
# Applying the function to the all Temperatures
# (This should show repeats of model-est probabilities given above)
meps <- sapply(Temperature, fun) # Store as model - estimated probabilities - "meps"
# Then plot them over the change in temperature
plot(y=meps, x=Temperature, ylab="Probability (%)", main = "Probability of O-Ring Damage with Heat", sub = "Using Temperature as a Proxy for Damaging O-Rings", type = "line")
curve(fun(x), add=TRUE)
# Applying the function to the all Temperatures
# (This should show repeats of model-est probabilities given above)
meps <- sapply(Temperature, fun) # Store as model - estimated probabilities - "meps"
# Then plot them over the change in temperature
plot(y=meps, x=Temperature, ylab="Probability (%)", main = "Probability of O-Ring Damage with Heat", sub = "Using Temperature as a Proxy for Damaging O-Rings")
curve(fun(x), add=TRUE)
