knitr::opts_chunk$set(echo = TRUE)
require(tidyr)
require(tidyverse)
require(lubridate)
require(quantmod)
require(stats)
# Load the data from the remote repository
producer <- read_csv("https://raw.githubusercontent.com/palmorezm/msdsdata607/master/Projects/Final/MER_T01_01.csv")
# Adds energy production data
sector <- read_csv("https://raw.githubusercontent.com/palmorezm/msdsdata607/master/Projects/Final/MER_T02_01.csv")
# Adds energy consumption data by industry sectors
source <- read_csv("https://raw.githubusercontent.com/palmorezm/msdsdata607/master/Projects/Final/MER_T11_01.csv")
# Adds emissions from energy sources
# Source Cleaning
# Extract monthly subsets of 2020
source.202001 <- subset(source, YYYYMM == 202001)
source.202002 <- subset(source, YYYYMM == 202002)
source.202003 <- subset(source, YYYYMM == 202003)
source.202004 <- subset(source, YYYYMM == 202004)
source.202005 <- subset(source, YYYYMM == 202005)
source.202006 <- subset(source, YYYYMM == 202006)
source.202007 <- subset(source, YYYYMM == 202007)
# Combine existing monthly subsets into data frame of the partial year
source.2020 <- rbind(source.202001,source.202002,source.202003, source.202004,source.202005,source.202006,source.202007)
# Order the rows by their sources and assign each value a month
source.2020 <- source.2020 %>%
arrange(desc(Column_Order))
source.2020$M <- rep(rep(1:7), length.out = 98)
# Reformat dates to year-month-day
source$YYYYMM <- lubridate::parse_date_time(source$YYYYMM, c("ym"))
# Extract rows that fail to parse then store as source data totals
source.totals <- source[rowSums(is.na(source)) > 0,]
# generate a sequence of numbers that repeats each number 14 times starting with 1973 and ending with 2020 for a total of 47 repetitions and 658 number values
source.totals$YYYYMM2 <- rep(rep(1973:2020, times=47, each=14), length.out = 658)
# generate a sequence of numbers that repeats each number 1 time starting with 1973 and ending with 2019 for a total of 46 repetitions and 658 number values
source.totals$YYYYMM <- rep(rep(1973:2019), length.out=658)
# Extract TETCEUS monthly totals
source.2020.totals <- source.2020 %>%
filter(MSN == "TETCEUS")
# Compute average monthly totals of each year 1973 - 2019 using monthly observations of each year
source.totals <- source.totals %>%
filter(MSN == "TETCEUS") %>%
mutate(avg_month = Value/12)
# remove missing values from monthly source data
source <- na.omit(source)
# Producer Cleaning
# Extract monthly subsets of 2020
producer.202001 <- subset(producer, YYYYMM == 202001)
producer.202002 <- subset(producer, YYYYMM == 202002)
producer.202003 <- subset(producer, YYYYMM == 202003)
producer.202004 <- subset(producer, YYYYMM == 202004)
producer.202005 <- subset(producer, YYYYMM == 202005)
producer.202006 <- subset(producer, YYYYMM == 202006)
producer.202007 <- subset(producer, YYYYMM == 202007)
# Combine existing monthly subsets into data frame of the partial year
producer.2020 <- rbind(producer.202001,producer.202002,producer.202003, producer.202004,producer.202005,producer.202006,producer.202007)
# Reformat dates to year-month-day
producer$YYYYMM <- lubridate::parse_date_time(producer$YYYYMM, c("ym"))
# Extract rows that fail to parse then store as source data totals
producer.totals <- producer[rowSums(is.na(producer)) > 0,]
# Find rows with totals prior to 1973 and reassign their dates in sequences of 23 until 12 have been completed for a total of 299 year values
producer.pre73 <- producer.totals[c(1:24, 72:96, 143:167, 214:238, 285:309, 356:380, 427:451, 498:522, 569:593, 640:664, 711:735, 782:806),]
producer.pre73$YYYYMM <- rep(rep(1949:1972), length.out = 299)
# Using 1973+ apply the sequence generation as yyyy-mm-dd to producers; repeat 1973 - 2019
producer.totals <-  producer.totals[c(25:71,97:142,168:213, 239:284,310:355, 381:426, 452:497, 523:568, 594:639, 665:710, 736:781, 807:852),]
# remove missing values from monthly source data
producer <-  na.omit(producer)
# Sector Cleaning
# Reformat dates to year-month-day
sector$YYYYMM <- lubridate::parse_date_time(sector$YYYYMM, c("ym"))
# Extract rows that fail to parse then store as source data totals
sector.totals <- sector[rowSums(is.na(sector)) > 0,]
# Combine sources into one data frame
all <- rbind(producer, sector, source)
source[1:4, c(1:3,5)]
# Mean CO2 since 1973 - given reliable source data
normal.co2 <- source.totals %>%
filter(Column_Order == 14) %>%
summarise(since_1973 = mean(Value))
# Total co2 in 2020 thus far
thusfar.2020 <- source.2020 %>%
filter(Column_Order == 14) %>%
summarise(thusfar.2020 = sum(Value))
# Mean of co2 thus far in 2020
thusfar.2020.mean <- source.2020 %>%
filter(Column_Order == 14) %>%
summarise(mean = mean(Value))
# Find expected co2 with current mean emissions for year
est.co2 <- signif(thusfar.2020 + (thusfar.2020.mean * 5), digits = 6)
est.co2 <- data_frame(normal.co2, est.co2) %>%
mutate(dif = since_1973 - thusfar.2020) %>%
rename(est.2020 = thusfar.2020,
obs.1973 = since_1973)
# Change calculation values to numeric values outside the data frame
totalco2.2020 <- round(thusfar.2020$thusfar.2020, digits= 2)
meanco2.2020 <- round(thusfar.2020.mean$mean, digits = 2)
# Differences as a proportion and percentage
Peo <- signif((est.co2$est.2020/est.co2$obs.1973), digits = 4)
Peo.dif <- signif((est.co2$obs.1973 - est.co2$est.2020)/(est.co2$obs.1973), digits = 4)
reduction.2020 <- signif((Peo - Peo.dif), digits = 4)
source.totals %>%
filter(Description == "Total Energy CO2 Emissions") %>%
ggplot(aes(YYYYMM, Value)) +
geom_point(aes(color = Description)) +
geom_smooth() +
geom_hline(yintercept = est.co2$obs.1973, color = "blue", linetype = "dashed")  +
geom_hline(yintercept = est.co2$est.2020, color = "dark green", linetype = "dotdash", size = 1) +
labs(x = "Time",
y = "Million Metric Tons CO2",
title = "Total CO2 Emissions in US",
subtitle = "Using Yearly Totals from All Energy Sources",
caption = "Figure 1") +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
legend.position = "none",
plot.caption = element_text(hjust = 0.5))
t <- 1.96 # at 95% confidence
# source.yyyy indicates the start year
x.source2020 <- mean(source.2020.totals$Value, na.rm = TRUE)
sd.source2020 <-  sd(source.2020.totals$Value, na.rm = TRUE)
n.source2020 <- source.2020.totals %>%
summarise(freq = table(Value)) %>%
summarise(n = sum(freq, na.rm = TRUE))
upper.ci.2020 <- x.source2020 + t*(sd.source2020/sqrt(n.source2020$n))
lower.ci.2020 <- x.source2020 - t*(sd.source2020/sqrt(n.source2020$n))
# interval for 1973 to 2019
x.source1973 <- mean(source.totals$avg_month, na.rm = TRUE)
sd.source1973 <-  sd(source.totals$avg_month, na.rm = TRUE)
n.source1973 <- source.totals %>%
summarise(freq = table(avg_month)) %>%
summarise(n = sum(freq, na.rm = TRUE))
upper.ci.1973 <- x.source1973 + t*(sd.source1973/sqrt(n.source1973$n))
lower.ci.1973 <- x.source1973 - t*(sd.source1973/sqrt(n.source1973$n))
cor.test <- cor.test(source.totals$Value, source.totals$YYYYMM)
co2.lm <- lm(source.totals$YYYYMM ~ source.totals$avg_month)
co2.lm.res <- summary(co2.lm)
t.test <- t.test(source.2020.totals$Value, source.totals$avg_month)
co2.lm
knitr::opts_chunk$set(echo = TRUE)
require(tidyr)
require(tidyverse)
require(lubridate)
require(quantmod)
require(stats)
# Load the data from the remote repository
producer <- read_csv("https://raw.githubusercontent.com/palmorezm/msdsdata607/master/Projects/Final/MER_T01_01.csv")
# Adds energy production data
sector <- read_csv("https://raw.githubusercontent.com/palmorezm/msdsdata607/master/Projects/Final/MER_T02_01.csv")
# Adds energy consumption data by industry sectors
source <- read_csv("https://raw.githubusercontent.com/palmorezm/msdsdata607/master/Projects/Final/MER_T11_01.csv")
# Adds emissions from energy sources
# Source Cleaning
# Extract monthly subsets of 2020
source.202001 <- subset(source, YYYYMM == 202001)
source.202002 <- subset(source, YYYYMM == 202002)
source.202003 <- subset(source, YYYYMM == 202003)
source.202004 <- subset(source, YYYYMM == 202004)
source.202005 <- subset(source, YYYYMM == 202005)
source.202006 <- subset(source, YYYYMM == 202006)
source.202007 <- subset(source, YYYYMM == 202007)
# Combine existing monthly subsets into data frame of the partial year
source.2020 <- rbind(source.202001,source.202002,source.202003, source.202004,source.202005,source.202006,source.202007)
# Order the rows by their sources and assign each value a month
source.2020 <- source.2020 %>%
arrange(desc(Column_Order))
source.2020$M <- rep(rep(1:7), length.out = 98)
# Reformat dates to year-month-day
source$YYYYMM <- lubridate::parse_date_time(source$YYYYMM, c("ym"))
# Extract rows that fail to parse then store as source data totals
source.totals <- source[rowSums(is.na(source)) > 0,]
# generate a sequence of numbers that repeats each number 14 times starting with 1973 and ending with 2020 for a total of 47 repetitions and 658 number values
source.totals$YYYYMM2 <- rep(rep(1973:2020, times=47, each=14), length.out = 658)
# generate a sequence of numbers that repeats each number 1 time starting with 1973 and ending with 2019 for a total of 46 repetitions and 658 number values
source.totals$YYYYMM <- rep(rep(1973:2019), length.out=658)
# Extract TETCEUS monthly totals
source.2020.totals <- source.2020 %>%
filter(MSN == "TETCEUS")
# Compute average monthly totals of each year 1973 - 2019 using monthly observations of each year
source.totals <- source.totals %>%
filter(MSN == "TETCEUS") %>%
mutate(avg_month = Value/12)
# remove missing values from monthly source data
source <- na.omit(source)
# Producer Cleaning
# Extract monthly subsets of 2020
producer.202001 <- subset(producer, YYYYMM == 202001)
producer.202002 <- subset(producer, YYYYMM == 202002)
producer.202003 <- subset(producer, YYYYMM == 202003)
producer.202004 <- subset(producer, YYYYMM == 202004)
producer.202005 <- subset(producer, YYYYMM == 202005)
producer.202006 <- subset(producer, YYYYMM == 202006)
producer.202007 <- subset(producer, YYYYMM == 202007)
# Combine existing monthly subsets into data frame of the partial year
producer.2020 <- rbind(producer.202001,producer.202002,producer.202003, producer.202004,producer.202005,producer.202006,producer.202007)
# Reformat dates to year-month-day
producer$YYYYMM <- lubridate::parse_date_time(producer$YYYYMM, c("ym"))
# Extract rows that fail to parse then store as source data totals
producer.totals <- producer[rowSums(is.na(producer)) > 0,]
# Find rows with totals prior to 1973 and reassign their dates in sequences of 23 until 12 have been completed for a total of 299 year values
producer.pre73 <- producer.totals[c(1:24, 72:96, 143:167, 214:238, 285:309, 356:380, 427:451, 498:522, 569:593, 640:664, 711:735, 782:806),]
producer.pre73$YYYYMM <- rep(rep(1949:1972), length.out = 299)
# Using 1973+ apply the sequence generation as yyyy-mm-dd to producers; repeat 1973 - 2019
producer.totals <-  producer.totals[c(25:71,97:142,168:213, 239:284,310:355, 381:426, 452:497, 523:568, 594:639, 665:710, 736:781, 807:852),]
# remove missing values from monthly source data
producer <-  na.omit(producer)
# Sector Cleaning
# Reformat dates to year-month-day
sector$YYYYMM <- lubridate::parse_date_time(sector$YYYYMM, c("ym"))
# Extract rows that fail to parse then store as source data totals
sector.totals <- sector[rowSums(is.na(sector)) > 0,]
# Combine sources into one data frame
all <- rbind(producer, sector, source)
source[1:4, c(1:3,5)]
# Mean CO2 since 1973 - given reliable source data
normal.co2 <- source.totals %>%
filter(Column_Order == 14) %>%
summarise(since_1973 = mean(Value))
# Total co2 in 2020 thus far
thusfar.2020 <- source.2020 %>%
filter(Column_Order == 14) %>%
summarise(thusfar.2020 = sum(Value))
# Mean of co2 thus far in 2020
thusfar.2020.mean <- source.2020 %>%
filter(Column_Order == 14) %>%
summarise(mean = mean(Value))
# Find expected co2 with current mean emissions for year
est.co2 <- signif(thusfar.2020 + (thusfar.2020.mean * 5), digits = 6)
est.co2 <- data_frame(normal.co2, est.co2) %>%
mutate(dif = since_1973 - thusfar.2020) %>%
rename(est.2020 = thusfar.2020,
obs.1973 = since_1973)
# Change calculation values to numeric values outside the data frame
totalco2.2020 <- round(thusfar.2020$thusfar.2020, digits= 2)
meanco2.2020 <- round(thusfar.2020.mean$mean, digits = 2)
# Differences as a proportion and percentage
Peo <- signif((est.co2$est.2020/est.co2$obs.1973), digits = 4)
Peo.dif <- signif((est.co2$obs.1973 - est.co2$est.2020)/(est.co2$obs.1973), digits = 4)
reduction.2020 <- signif((Peo - Peo.dif), digits = 4)
source.totals %>%
filter(Description == "Total Energy CO2 Emissions") %>%
ggplot(aes(YYYYMM, Value)) +
geom_point(aes(color = Description)) +
geom_smooth() +
geom_hline(yintercept = est.co2$obs.1973, color = "blue", linetype = "dashed")  +
geom_hline(yintercept = est.co2$est.2020, color = "dark green", linetype = "dotdash", size = 1) +
labs(x = "Time",
y = "Million Metric Tons CO2",
title = "Total CO2 Emissions in US",
subtitle = "Using Yearly Totals from All Energy Sources",
caption = "Figure 1") +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
legend.position = "none",
plot.caption = element_text(hjust = 0.5))
t <- 1.96 # at 95% confidence
# source.yyyy indicates the start year
x.source2020 <- mean(source.2020.totals$Value, na.rm = TRUE)
sd.source2020 <-  sd(source.2020.totals$Value, na.rm = TRUE)
n.source2020 <- source.2020.totals %>%
summarise(freq = table(Value)) %>%
summarise(n = sum(freq, na.rm = TRUE))
upper.ci.2020 <- x.source2020 + t*(sd.source2020/sqrt(n.source2020$n))
lower.ci.2020 <- x.source2020 - t*(sd.source2020/sqrt(n.source2020$n))
# interval for 1973 to 2019
x.source1973 <- mean(source.totals$avg_month, na.rm = TRUE)
sd.source1973 <-  sd(source.totals$avg_month, na.rm = TRUE)
n.source1973 <- source.totals %>%
summarise(freq = table(avg_month)) %>%
summarise(n = sum(freq, na.rm = TRUE))
upper.ci.1973 <- x.source1973 + t*(sd.source1973/sqrt(n.source1973$n))
lower.ci.1973 <- x.source1973 - t*(sd.source1973/sqrt(n.source1973$n))
cor.test <- cor.test(source.totals$Value, source.totals$YYYYMM)
co2.lm <- lm(source.totals$YYYYMM ~ source.totals$avg_month)
co2.lm.res <- summary(co2.lm)
t.test <- t.test(source.2020.totals$Value, source.totals$avg_month)
source %>%
filter(Column_Order == 14) %>%
ggplot(aes(YYYYMM, Value)) +
geom_point(aes(color = Description)) +
geom_smooth() +
geom_hline(yintercept = est.co2$obs.1973/12, color = "blue", linetype = "dashed")  +
geom_hline(yintercept = est.co2$est.2020/12, color = "dark green", linetype = "dotdash", size = 1) +
labs(x = "Time",
y = "Million Metric Tons CO2",
title = "Total CO2 Emissions in US",
subtitle = "Using Monthly Totals from All Energy Sources",
caption = "Figure 2") +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
legend.position = "none",
plot.caption = element_text(hjust = 0.5))
source.2020 %>%
filter(Column_Order == 14) %>%
ggplot(aes(YYYYMM, Value)) +
geom_point(aes(color = Description)) +
geom_smooth() +
geom_hline(yintercept = est.co2$obs.1973/12, color = "blue", linetype = "dashed")  +
geom_hline(yintercept = est.co2$est.2020/12, color = "dark green", linetype = "dotdash", size = 1) +
labs(x = "Time",
y = "Million Metric Tons CO2",
title = "Total CO2 Emissions in US in 2020",
subtitle = "Using Monthly Totals from All Energy Sources",
caption = "Figure 3") +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
legend.position = "none",
plot.caption = element_text(hjust = 0.5))
sector %>%
filter(Column_Order == "11") %>%
filter(Value < 20000) %>%
ggplot(aes (YYYYMM, Value)) +
geom_point(aes(color = Description)) +
geom_smooth(method = "lm", aes(color = "Linear Trend")) +
geom_smooth() +
labs(x = "Time",
y = "Trillion Btu",
title = "Total Primary Energy Consumed in US",
subtitle = "Using Monthly Totals from All Energy Sectors",
caption = "Figure 4") +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
plot.caption = element_text(hjust = 0.5),
legend.position = "top")
producer %>%
filter(Column_Order == "1") %>%
filter(Value < 20) %>%
ggplot(aes(YYYYMM, Value)) +
geom_point(aes(color = Description)) +
geom_smooth() +
labs(x = "Time",
y = "Quad Btu",
title = "Total Fossil Fuel Production in US",
subtitle = "Using Monthly Energy Totals from Burning Fossil Fuels",
caption = "Figure 5") +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
plot.caption = element_text(hjust = 0.5),
legend.position = "none")
producer %>%
filter(Column_Order == "3") %>%
filter(Value < 2) %>%
ggplot(aes(YYYYMM, Value)) + geom_point(aes(color = Description)) +
geom_smooth() +
labs(x = "Time",
y = "Quad Btu",
title = "Total Renewable Energy Production in US",
subtitle = "Using Monthly Energy Totals from Renewable Sourcs",
caption = "Figure 6") +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
legend.position = "none")
# Largest 4 sources of emission - everything else is below 1000
source %>%
subset(Column_Order == c(1,2,13,9)) %>%
ggplot(aes(YYYYMM, Value)) +
geom_line(aes(color = MSN)) +
geom_point(aes(color=MSN)) +
labs(x = "Time",
y = "Million Metric Tons CO2",
title = "Total CO2 Emissions in US",
subtitle = "Using Yearly Totals from Each Energy Sources",
caption = "Figure 7") +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
legend.position = "top",
plot.caption = element_text(hjust = 0.5))
ggplot(producer, aes(Description, Value)) +
geom_col(aes(fill = Description)) +
labs(x = "Category",
y = "Quad Btu",
title = "Energy Production in US",
subtitle = "Categorized by Types of Producers",
caption = "Figure 8")+
theme_classic() +
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
plot.caption = element_text(hjust = 0.5),
legend.position = "right",
axis.text = element_blank())
producer %>%
filter(Column_Order == c(1,9,3,11,2,10)) %>%
ggplot(aes(Description, Value)) +
geom_boxplot(aes(color = Description)) +
labs(x = "Category",
y = "Quad Btu",
title = "Distribution of Energy Production in US",
subtitle = "Categorized by Types of Producers",
caption = "Figure 8")+
theme_classic() +
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
plot.caption = element_text(hjust = 0.5),
legend.position = "right",
axis.text = element_blank()) +
coord_flip()
est.co2$obs.1973
est.co2$obs.1973/12
require(kableExtra)
df <- data.frame(bucket = 1:11,
value = c(-0.8125594, -0.7590050, -0.7189301, -0.7188391, -0.5047816,
-0.3439579, -0.4376782, -0.1300217, 0.9145718, 2.1844290,
4.8374356))
kable(df)
